{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Datadog Agent Dev","text":"CI/CD Docs Package Meta <p>Welcome to the Datadog Agent developer tools documentation. Here you'll find:</p> <ul> <li>Development environment setup guides</li> <li>IDE and editor integrations</li> <li>Build and testing tools</li> <li>Development workflow utilities</li> </ul> <p>This repository documents the development environment and toolchain for Datadog Agent contributors. You'll find resources for IDE setup, build tools, and development utilities rather than Agent implementation details.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Desktop readers can use keyboard shortcuts to navigate.</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"install/","title":"Installation","text":""},{"location":"install/#package-managers","title":"Package managers","text":""},{"location":"install/#homebrew","title":"Homebrew","text":"<p>Install the <code>dda</code> cask using Homebrew.</p> <pre><code>brew install --cask dda\n</code></pre> <p>You can upgrade to the latest version by running the following command.</p> <pre><code>brew upgrade --cask dda\n</code></pre>"},{"location":"install/#installers","title":"Installers","text":"macOSWindows GUI installerCommand line installer <ol> <li>In your browser, download the <code>.pkg</code> file: dda-universal.pkg</li> <li>Run your downloaded file and follow the on-screen instructions.</li> <li>Restart your terminal.</li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.24.1\n</code></pre></li> </ol> <ol> <li>Download the file using the <code>curl</code> command. The <code>-o</code> option specifies the file name that the downloaded package is written to. In this example, the file is written to <code>dda-universal.pkg</code> in the current directory.         <pre><code>curl -Lo dda-universal.pkg https://github.com/DataDog/datadog-agent-dev/releases/latest/download/dda-universal.pkg\n</code></pre></li> <li>Run the standard macOS <code>installer</code> program, specifying the downloaded <code>.pkg</code> file as the source. Use the <code>-pkg</code> parameter to specify the name of the package to install, and the <code>-target /</code> parameter for the drive in which to install the package. The files are installed to <code>/usr/local/dda</code>, and an entry is created at <code>/etc/paths.d/dda</code> that instructs shells to add the <code>/usr/local/dda</code> directory to. You must include sudo on the command to grant write permissions to those folders.         <pre><code>sudo installer -pkg ./dda-universal.pkg -target /\n</code></pre></li> <li>Restart your terminal.</li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.24.1\n</code></pre></li> </ol> GUI installerCommand line installer <ol> <li>In your browser, download one the <code>.msi</code> files:<ul> <li>dda-x64.msi</li> </ul> </li> <li>Run your downloaded file and follow the on-screen instructions.</li> <li>Restart your terminal.</li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.24.1\n</code></pre></li> </ol> <ol> <li> <p>Download and run the installer using the standard Windows <code>msiexec</code> program, specifying one of the <code>.msi</code> files as the source. Use the <code>/passive</code> and <code>/i</code> parameters to request an unattended, normal installation.</p> x64x86 <pre><code>msiexec /passive /i https://github.com/DataDog/datadog-agent-dev/releases/latest/download/dda-x64.msi\n</code></pre> <pre><code>msiexec /passive /i https://github.com/DataDog/datadog-agent-dev/releases/latest/download/dda-x86.msi\n</code></pre> </li> <li> <p>Restart your terminal.</p> </li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.24.1\n</code></pre></li> </ol>"},{"location":"install/#standalone-binaries","title":"Standalone binaries","text":"<p>After downloading the archive corresponding to your platform and architecture, extract the binary to a directory that is on your PATH and rename to <code>dda</code>.</p> macOSWindowsLinux <ul> <li>dda-aarch64-apple-darwin.tar.gz</li> <li>dda-x86_64-apple-darwin.tar.gz</li> </ul> <ul> <li>dda-x86_64-pc-windows-msvc.zip</li> <li>dda-i686-pc-windows-msvc.zip</li> </ul> <ul> <li>dda-aarch64-unknown-linux-gnu.tar.gz</li> <li>dda-x86_64-unknown-linux-gnu.tar.gz</li> <li>dda-x86_64-unknown-linux-musl.tar.gz</li> <li>dda-powerpc64le-unknown-linux-gnu.tar.gz</li> </ul>"},{"location":"install/#upgrade","title":"Upgrade","text":"<p>You can upgrade to the latest version by running the following command.</p> <pre><code>dda self update\n</code></pre> <p>If you installed <code>dda</code> using a package manager, prefer its native upgrade mechanism.</p> <p>Warning</p> <p>Development and manual installations do not support this command and each have their own means of upgrading.</p>"},{"location":"install/#development","title":"Development","text":"<p>You can install <code>dda</code> directly from the source code, outside of release cycles. This is useful if you want to test the latest changes or contribute to the project.</p> <ol> <li> <p>Clone the <code>dda</code> repository and enter the directory.</p> <pre><code>git clone https://github.com/DataDog/datadog-agent-dev.git\ncd datadog-agent-dev\n</code></pre> </li> <li> <p>Install UV.</p> </li> <li> <p>Run the following command to install <code>dda</code> as a tool in development mode:</p> <pre><code>uv tool install -e .\n</code></pre> </li> <li> <p>(optional) If installation emitted a warning about a directory not being on your <code>PATH</code>, you can add it manually or run the following command to add it automatically.</p> <pre><code>uv tool update-shell\n</code></pre> </li> </ol> <p>This will ensure that <code>dda</code> always uses the version of the code checked out in the repository. However, this will not automatically reflect changes in dependencies. To synchronize those as well at any point after installation, run the following command.</p> <pre><code>uv tool upgrade dda\n</code></pre>"},{"location":"install/#manual","title":"Manual","text":"<p>Warning</p> <p>This method is not recommended.</p> <p><code>dda</code> is available on PyPI and can be installed with any Python package installer like pip or UV.</p> <p>The Python environment in which you choose to install must be at least version 3.12.</p>"},{"location":"guidelines/cli/","title":"CLI guidelines","text":""},{"location":"guidelines/cli/#command-hierarchy","title":"Command hierarchy","text":"<p>Prefer organizing commands into a deeply nested hierarchy rather than a flat structure. For example, rather than a hypothetical <code>dda fetch-ci-artifacts</code> command, prefer <code>dda ci artifacts fetch</code>.</p>"},{"location":"guidelines/cli/#responsiveness","title":"Responsiveness","text":""},{"location":"guidelines/cli/#lazy-imports","title":"Lazy imports","text":"<p>Always use lazy imports for CLI commands. Although commands and command groups are loaded lazily, there are two situations in which imports outside of the <code>cmd</code> callbacks can influence responsiveness:</p> <ul> <li>Displaying the help text of a command group will load all subcommands.</li> <li>Executing a command will load all parent command groups.</li> </ul> <p>Lazy imports should also be preferred in most other situations. The exceptions are:</p> <ol> <li>Modules that are always imported for use by the CLI framework itself (e.g. <code>click</code>, <code>dda.utils.fs</code>).</li> <li>Standard library modules that are both used frequently and have a sub-millisecond startup overhead (e.g. <code>os</code>, <code>sys</code>, <code>functools</code>).</li> <li>Modules that must only be imported in the global scope like <code>typing</code> (for now) and <code>__future__</code>.</li> <li>Lazily importing within functions that would be called in a tight loop. In this case, import normally and refactor logic such that the function itself is only imported when needed.</li> </ol> <p>Note</p> <p>Exceptions 1-3 will be enforced by static analysis soon: astral-sh/ruff#17118</p>"},{"location":"guidelines/cli/#user-feedback","title":"User feedback","text":"<p>Never leave users without output for more than a second. Before performing potentially long-running operations, notify the user somehow such as using the <code>Application.display_waiting</code> or <code>Application.status</code> methods.</p>"},{"location":"guidelines/docs/","title":"Documentation guidelines","text":"<p>This site is built by MkDocs and uses the Material for MkDocs theme with extensions.</p> <p>You can serve documentation locally with the <code>run docs serve</code> local command.</p>"},{"location":"guidelines/docs/#organization","title":"Organization","text":"<p>The site structure is defined by the <code>nav</code> key in the <code>mkdocs.yml</code> file.</p> <p>We strive to follow the principles of the Di\u00e1taxis documentation framework.</p> <p>When adding new pages, first think about what it is exactly that you are trying to document. For example, if you intend to write about something everyone must follow as a standard practice it would be classified as a guideline whereas a short piece about performing a particular task would be a how-to.</p> <p>After deciding the kind of content, strive to further segment the page under logical groupings for easier navigation.</p>"},{"location":"guidelines/docs/#line-continuations","title":"Line continuations","text":"<p>For prose where the rendered content should have no line breaks, always keep the Markdown on the same line. This removes the need for any stylistic enforcement and allows for IDEs to intelligently wrap as usual.</p> <p>Tip</p> <p>When you wish to force a line continuation but stay within the block, indent by 2 spaces from the start of the text and end the block with a new line. For example, the following shows how you would achieve a multi-line ordered list item:</p> <ul> <li> <p>Markdown</p> <pre><code>1. first line\n\n     second line\n\n1. third line\n</code></pre> </li> <li> <p>Rendered</p> <ol> <li> <p>first line</p> <p>second line</p> </li> <li> <p>third line</p> </li> </ol> </li> </ul>"},{"location":"guidelines/docs/#emphasis","title":"Emphasis","text":"<p>When you want to call something out, use admonitions (with the Blocks syntax) rather than making large chunks of text bold or italicized. The latter is okay for small spans within sentences.</p> <p>Here's an example:</p> <ul> <li> <p>Markdown</p> <pre><code>/// info\nLorem ipsum ...\n///\n</code></pre> </li> <li> <p>Rendered</p> <p>Info</p> <p>Lorem ipsum ...</p> </li> </ul>"},{"location":"guidelines/docs/#links","title":"Links","text":"<p>Always use inline links rather than reference links.</p> <p>The only exception to that rule is links that many pages may need to reference. Such links may be added to this file that all pages are able to reference.</p>"},{"location":"guidelines/docs/#abbreviations","title":"Abbreviations","text":"<p>Abbreviations like DSD may be added to this file which will make it so that a tooltip will be displayed on hover.</p>"},{"location":"how-to/extend/local/","title":"How to add local commands","text":"<p>The CLI dynamically discovers commands within the current directory under <code>.dda/extend/commands</code>. Most commonly, there is only a single <code>run</code> command group defined here that contains all the commands.</p> <p>For example, if you wanted to add a <code>dda run foo bar</code> command, you could add the following files:</p> <pre><code>.dda/extend/commands/run/foo/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 bar\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>The <code>foo</code> command group might look like this:</p>  .dda/extend/commands/run/foo/__init__.py <pre><code>from dda.cli.base import dynamic_group\n\n\n@dynamic_group(short_help=\"Foo commands\")\ndef cmd() -&gt; None:\n    \"\"\"\n    Long description of the `dda run foo` command group.\n    \"\"\"\n</code></pre> <p>The <code>bar</code> command might look like this:</p>  .dda/extend/commands/run/foo/bar/__init__.py <pre><code>from dda.cli.base import dynamic_command, pass_app\n\n\n@dynamic_command(short_help=\"Bar command\")\n@pass_app\ndef cmd(app) -&gt; None:\n    \"\"\"\n    Long description of the `dda run foo bar` command.\n    \"\"\"\n    app.display(\"Running bar command\")\n</code></pre> <p>Tip</p> <p>See the tutorial for more information about creating commands.</p>"},{"location":"how-to/extend/local/#importing-utilities","title":"Importing utilities","text":"<p>The <code>.dda/extend/pythonpath</code> directory is added to the Python search path. For example, if you have the following structure:</p> <pre><code>.dda/extend/pythonpath/\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 foo.py\n</code></pre> <p>Commands can import the <code>foo</code> module like this:</p> <pre><code>from utils import foo\n</code></pre>"},{"location":"how-to/extend/plugin/","title":"How to use plugins","text":"<p>Every level of commands looks for executables on PATH that start with <code>dda-</code>, with every subcommand separated by a single hyphen.</p> <p>For example, if you have an executable <code>dda-foo</code> in your PATH, you can run it with:</p> <pre><code>dda foo\n</code></pre> <p>The help text of <code>dda</code> would contain the following:</p> <pre><code>foo     [external plugin]\n</code></pre> <p>If you wanted to add a subcommand to the <code>config</code> command, you could create an executable <code>dda-config-bar</code> in your PATH and then run:</p> <pre><code>dda config bar\n</code></pre> <p>Every level of commands within the executable name must exist in the main <code>dda</code> CLI. So, for example, an executable named <code>dda-foo-bar</code> would be invalid because <code>foo</code> is not an existing top-level command.</p>"},{"location":"how-to/process/run/","title":"How to run executables","text":"<p>The <code>Application.subprocess</code> property is the preferred way to run and capture the output of external commands.</p> <pre><code>import click\n\nfrom dda.cli.base import dynamic_command, pass_app\n\n\n@dynamic_command()\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    # call methods on app.subprocess\n</code></pre>"},{"location":"how-to/process/run/#running-commands","title":"Running commands","text":"<p>The <code>SubprocessRunner.run</code> method is used to run a command and wait for it to complete.</p> <pre><code>app.subprocess.run([\"command\", \"arg1\", \"arg2\"])\n</code></pre>"},{"location":"how-to/process/run/#capturing-output","title":"Capturing output","text":"<p>The <code>SubprocessRunner.capture</code> method is used to run a command and capture its output.</p> <pre><code>stdout = app.subprocess.capture([\"command\", \"arg1\", \"arg2\"])\n</code></pre>"},{"location":"how-to/process/run/#running-a-final-command","title":"Running a final command","text":"<p>The <code>SubprocessRunner.exit_with</code> method is used to run a command and exit the current process with the command's exit code.</p> <pre><code>app.subprocess.exit_with([\"command\", \"arg1\", \"arg2\"])\n</code></pre>"},{"location":"how-to/process/tools/","title":"How to use tools","text":"<p>Some executables require special handling to be executed properly. For example, Docker requires a specific environment variable to be set in order to disable noisy CLI hints.</p> <p>Such executables are available as tools on the <code>Application.tools</code> property. Every tool has the same methods as the <code>SubprocessRunner</code> class (except for the <code>spawn_daemon</code> method).</p> <p>The first argument of commands, the tool name itself, is omitted as it is implicit. For example, to run <code>docker build</code>, you can write:</p> <pre><code>app.tools.docker.run([\"build\", \".\", \"--tag\", \"my-image\"])\n</code></pre>"},{"location":"reference/api/app/","title":"Application reference","text":""},{"location":"reference/api/app/#dda.cli.application.Application","title":"Application","text":"<p>This class is never imported directly. Instead, use the <code>dda.cli.base.pass_app</code> decorator to pass an instance of this class to your command.</p> <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom dda.cli.base import dynamic_command, pass_app\n\nif TYPE_CHECKING:\n    from dda.cli.application import Application\n\n\n@dynamic_command(short_help=\"Some command\")\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    \"\"\"\n    Long description of the command.\n    \"\"\"\n    app.display_waiting(\"Running some command\")\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.config","title":"config","text":"<pre><code>config: RootConfig\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.subprocess","title":"subprocess","text":"<pre><code>subprocess: SubprocessRunner\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.http","title":"http","text":"<pre><code>http: HTTPClientManager\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.tools","title":"tools","text":"<pre><code>tools: Tools\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.telemetry","title":"telemetry","text":"<pre><code>telemetry: TelemetryManager\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.last_error","title":"last_error","text":"<pre><code>last_error: str\n</code></pre> <p>The last recorded error message which will be collected as telemetry. This can be overwritten like so:</p> <pre><code>app.last_error = \"An error occurred\"\n</code></pre> <p>Alternatively, you can append to it:</p> <pre><code>app.last_error += \"\\nExtra information or context\"\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.abort","title":"abort","text":"<pre><code>abort(text: str = '', code: int = 1) -&gt; NoReturn\n</code></pre> <p>Gracefully terminate the application with an optional error message. The message is appended to the last error message.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The error message to display.</p> <code>''</code> <code>code</code> <code>int</code> <p>The exit code to use.</p> <code>1</code>"},{"location":"reference/api/app/#dda.cli.application.Application.display","title":"display","text":"<pre><code>display(text: str = '', **kwargs: Any) -&gt; None\n</code></pre> <p>Output text to stdout using the <code>info</code> style regardless of the configured verbosity level.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_critical","title":"display_critical","text":"<pre><code>display_critical(text: str = '', **kwargs: Any) -&gt; None\n</code></pre> <p>Output text to stderr using the <code>error</code> style regardless of the configured verbosity level.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_error","title":"display_error","text":"<pre><code>display_error(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>error</code> style if the configured verbosity level is at least <code>Verbosity.ERROR</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_warning","title":"display_warning","text":"<pre><code>display_warning(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>warning</code> style if the configured verbosity level is at least <code>Verbosity.WARNING</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_info","title":"display_info","text":"<pre><code>display_info(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>info</code> style if the configured verbosity level is at least <code>Verbosity.INFO</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_success","title":"display_success","text":"<pre><code>display_success(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>success</code> style if the configured verbosity level is at least <code>Verbosity.INFO</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_waiting","title":"display_waiting","text":"<pre><code>display_waiting(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>waiting</code> style if the configured verbosity level is at least <code>Verbosity.INFO</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_debug","title":"display_debug","text":"<pre><code>display_debug(\n    text: str = \"\",\n    level: int = VERBOSE,\n    *,\n    stderr: bool = True,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Output text using the <code>debug</code> style if the configured verbosity level is between <code>Verbosity.VERBOSE</code> and <code>Verbosity.TRACE</code> (inclusive).</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>level</code> <code>int</code> <p>The verbosity level.</p> <code>VERBOSE</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_header","title":"display_header","text":"<pre><code>display_header(\n    title: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Display a horizontal rule with an embedded title using the <code>success</code> style.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title to display.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Rule</code> constructor.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_table","title":"display_table","text":"<pre><code>display_table(data: dict[str, Any], *, stderr: bool = True) -&gt; None\n</code></pre> <p>Display a table with the given data using the <code>success</code> style for the keys.</p> <p>The following data:</p> <pre><code>{\n    \"key1\": {\n        \"nested1\": {\n            \"str\": \"text\",\n            \"int\": 1,\n            \"float\": 1.0,\n            \"bool\": True,\n            \"list\": [\"foo\", 2, \"bar\"],\n        },\n    },\n}\n</code></pre> <p>would be displayed as:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 key1 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502      \u2502 \u2502 nested1 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 str   \u2502 text              \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 int   \u2502 1                 \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 float \u2502 1.0               \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 bool  \u2502 True              \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 list  \u2502 ['foo', 2, 'bar'] \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The data to display.</p> required <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code>"},{"location":"reference/api/app/#dda.cli.application.Application.display_syntax","title":"display_syntax","text":"<pre><code>display_syntax(\n    *args: Any, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Display a syntax-highlighted block of text.</p> <p>Parameters:</p> Name Type Description Default <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>Syntax</code> constructor.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Syntax</code> constructor.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_markdown","title":"display_markdown","text":"<pre><code>display_markdown(\n    *args: Any, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Display rendered markdown.</p> <p>Parameters:</p> Name Type Description Default <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>Markdown</code> constructor.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Markdown</code> constructor.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.status","title":"status","text":"<pre><code>status(text: str, **kwargs: Any) -&gt; Status\n</code></pre> <p>Display a status indicator with the configured spinner. If the session is not interactive, the status indicator will be displayed as a waiting message.</p> <p>The returned object must be used as a context manager.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.status</code> method.</p> <code>{}</code>"},{"location":"reference/api/app/#dda.cli.application.Application.prompt","title":"prompt","text":"<pre><code>prompt(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Prompt the user for input.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>click.prompt</code> function.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>click.prompt</code> function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The user's input.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.confirm","title":"confirm","text":"<pre><code>confirm(*args: Any, **kwargs: Any) -&gt; bool\n</code></pre> <p>Prompt the user for confirmation.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>click.confirm</code> function.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>click.confirm</code> function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the user confirmed the action.</p>"},{"location":"reference/api/ci/","title":"CI utilities reference","text":""},{"location":"reference/api/ci/#dda.utils.ci.running_in_ci","title":"running_in_ci","text":"<pre><code>running_in_ci() -&gt; bool\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the current process is running in a CI environment.</p>"},{"location":"reference/api/command/","title":"Command API reference","text":""},{"location":"reference/api/command/#dda.cli.base.dynamic_command","title":"dynamic_command","text":"<pre><code>dynamic_command = partial(command, cls=DynamicCommand)\n</code></pre> <p>A decorator wrapping <code>click.command</code> that configures a <code>DynamicCommand</code>. Example:</p> <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom dda.cli.base import dynamic_command, pass_app\n\nif TYPE_CHECKING:\n    from dda.cli.application import Application\n\n\n@dynamic_command(short_help=\"Command\")\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    \"\"\"\n    Long description of the command.\n    \"\"\"\n    app.display(\"Running command\")\n</code></pre>"},{"location":"reference/api/command/#dda.cli.base.dynamic_group","title":"dynamic_group","text":"<pre><code>dynamic_group = partial(group, cls=DynamicGroup)\n</code></pre> <p>A decorator wrapping <code>click.group</code> that configures a <code>DynamicGroup</code>. Example:</p> <pre><code>from __future__ import annotations\n\nfrom dda.cli.base import dynamic_group\n\n\n@dynamic_group(\n    short_help=\"Command group\",\n)\ndef cmd() -&gt; None:\n    \"\"\"\n    Long description of the command group.\n    \"\"\"\n</code></pre>"},{"location":"reference/api/command/#dda.cli.base.DynamicCommand","title":"DynamicCommand","text":"<pre><code>DynamicCommand(\n    *args: Any,\n    features: list[str] | None = None,\n    dependencies: list[str] | None = None,\n    **kwargs: Any,\n)\n</code></pre> <p>A subclass of the <code>Command</code> class provided by rich-click that allows for dynamic help text and dependency management.</p> <p>Parameters:</p> Name Type Description Default <code>features</code> <code>list[str] | None</code> <p>A list of dependency groups that must be satisfied before the command callback can be invoked. These are defined in the <code>pyproject.toml</code> file.</p> <code>None</code> <code>dependencies</code> <code>list[str] | None</code> <p>An arbitrary list of dependencies that must be satisfied before the command callback can be invoked.</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional positional arguments to pass to the <code>Command</code> constructor.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Command</code> constructor.</p>"},{"location":"reference/api/command/#dda.cli.base.DynamicGroup","title":"DynamicGroup","text":"<pre><code>DynamicGroup(\n    *args: Any,\n    allow_external_plugins: bool | None = None,\n    subcommand_filter: Callable[[str], bool] | None = None,\n    search_path_finder: Callable[[], list[str]] | None = None,\n    **kwargs: Any,\n)\n</code></pre> <p>A subclass of the <code>Group</code> class provided by rich-click that allows for dynamic loading of subcommands.</p> <p>Parameters:</p> Name Type Description Default <code>allow_external_plugins</code> <code>bool | None</code> <p>Whether to allow external plugins to be loaded. The default is taken from the equivalent property of the parent group.</p> <code>None</code> <code>subcommand_filter</code> <code>Callable[[str], bool] | None</code> <p>A function that takes a subcommand name and returns a boolean indicating whether the subcommand should be included in the list of subcommands.</p> <code>None</code> <code>search_path_finder</code> <code>Callable[[], list[str]] | None</code> <p>A function that returns a list of directories to search for subcommands.</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional positional arguments to pass to the <code>Group</code> constructor.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Group</code> constructor.</p>"},{"location":"reference/api/config/","title":"Config reference","text":"<p>Configuration for <code>dda</code> itself is stored in a <code>config.toml</code> file located by default in one of the following platform-specific directories:</p> Platform Directory macOS <code>~/Library/Application Support/dd-agent-dev</code> Windows <code>%USERPROFILE%\\AppData\\Local\\dd-agent-dev</code> Linux <code>$XDG_CONFIG_HOME/dd-agent-dev</code> (the XDG_CONFIG_HOME environment variable defaults to <code>~/.config</code> on Linux) <p>You can select a custom path to the file using the <code>--config</code> root option or by setting the ConfigEnvVars.CONFIG environment variable.</p> <p>The file can be managed by the <code>config</code> command group.</p>"},{"location":"reference/api/config/#root","title":"Root","text":""},{"location":"reference/api/config/#dda.config.model.RootConfig","title":"RootConfig","text":"<p>The root configuration for the application. This is available as the <code>Application.config</code> property.</p>"},{"location":"reference/api/config/#dda.config.model.RootConfig.orgs","title":"orgs","text":"<pre><code>orgs: dict[str, OrgConfig] = field(default_factory=_default_orgs)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.env","title":"env","text":"<pre><code>env: EnvConfig = field(default_factory=EnvConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.envs","title":"envs","text":"<pre><code>envs: dict[str, dict[str, Any]] = {}\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.tools","title":"tools","text":"<pre><code>tools: ToolsConfig = field(default_factory=ToolsConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.storage","title":"storage","text":"<pre><code>storage: StorageDirs = field(default_factory=StorageDirs)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.git","title":"git","text":"<pre><code>git: GitConfig = field(default_factory=GitConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.github","title":"github","text":"<pre><code>github: GitHubConfig = field(default_factory=GitHubConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.terminal","title":"terminal","text":"<pre><code>terminal: TerminalConfig = field(default_factory=TerminalConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.update","title":"update","text":"<pre><code>update: UpdateConfig = field(default_factory=UpdateConfig)\n</code></pre>"},{"location":"reference/api/config/#environments","title":"Environments","text":""},{"location":"reference/api/config/#dda.config.model.env.EnvConfig","title":"EnvConfig","text":""},{"location":"reference/api/config/#dda.config.model.env.EnvConfig.dev","title":"dev","text":"<pre><code>dev: DevEnvConfig = field(default_factory=DevEnvConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig","title":"DevEnvConfig","text":"config.toml <pre><code>[env.dev]\ndefault-type = \"linux-container\"\nclone-repos = false\nuniversal-shell = false\neditor = \"vscode\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.default_type","title":"default_type","text":"<pre><code>default_type: str = field(\n    name=\"default-type\", default=DEFAULT_DEV_ENV\n)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.clone_repos","title":"clone_repos","text":"<pre><code>clone_repos: bool = field(name='clone-repos', default=False)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.universal_shell","title":"universal_shell","text":"<pre><code>universal_shell: bool = field(name='universal-shell', default=False)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.editor","title":"editor","text":"<pre><code>editor: str = DEFAULT_EDITOR\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__() -&gt; None\n</code></pre>"},{"location":"reference/api/config/#tools","title":"Tools","text":""},{"location":"reference/api/config/#dda.config.model.tools.ToolsConfig","title":"ToolsConfig","text":"config.toml <pre><code>[tools]\n...\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.tools.ToolsConfig.bazel","title":"bazel","text":"<pre><code>bazel: BazelConfig = field(default_factory=BazelConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.tools.BazelConfig","title":"BazelConfig","text":"config.toml <pre><code>[tools.bazel]\nmanaged = \"auto\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.tools.BazelConfig.managed","title":"managed","text":"<pre><code>managed: bool | Literal['auto'] = 'auto'\n</code></pre>"},{"location":"reference/api/config/#storage","title":"Storage","text":""},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs","title":"StorageDirs","text":"config.toml <pre><code>[storage]\ndata = \"/path/to/data\"\ncache = \"/path/to/cache\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs.data","title":"data","text":"<pre><code>data: Path = field(default_factory=default_data_dir)\n</code></pre> <p>This is the directory that is used to persist data. By default it is set to one of the following platform-specific directories:</p> Platform Directory macOS <code>~/Library/Application Support/dd-agent-dev</code> Windows <code>%USERPROFILE%\\AppData\\Local\\dd-agent-dev</code> Linux <code>$XDG_DATA_HOME/dd-agent-dev</code> (the XDG_DATA_HOME environment variable defaults to <code>~/.local/share</code> on Linux) <p>You can select a custom path to the directory using the <code>--data-dir</code> root option or by setting the ConfigEnvVars.DATA environment variable.</p>"},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs.cache","title":"cache","text":"<pre><code>cache: Path = field(default_factory=default_cache_dir)\n</code></pre> <p>This is the directory that is used to cache data. By default it is set to one of the following platform-specific directories:</p> Platform Directory macOS <code>~/Library/Caches/dd-agent-dev</code> Windows <code>%USERPROFILE%\\AppData\\Local\\dd-agent-dev\\Cache</code> Linux <code>$XDG_CACHE_HOME/dd-agent-dev</code> (the XDG_CACHE_HOME environment variable defaults to <code>~/.cache</code> on Linux) <p>You can select a custom path to the directory using the <code>--cache-dir</code> root option or by setting the ConfigEnvVars.CACHE environment variable.</p>"},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs.join","title":"join","text":"<pre><code>join(*parts: str) -&gt; StorageDirs\n</code></pre> <p>Join the storage directories with the given parts.</p> <p>Parameters:</p> Name Type Description Default <code>parts</code> <code>str</code> <p>The parts to join.</p> <code>()</code> <p>Returns:</p> Type Description <code>StorageDirs</code> <p>A new <code>StorageDirs</code> instance with the joined paths.</p>"},{"location":"reference/api/config/#git","title":"Git","text":""},{"location":"reference/api/config/#dda.config.model.git.GitConfig","title":"GitConfig","text":""},{"location":"reference/api/config/#dda.config.model.git.GitConfig.user","title":"user","text":"<pre><code>user: GitUser = field(default_factory=GitUser)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.git.GitUser","title":"GitUser","text":"config.toml <pre><code>[git.user]\nname = \"U.N. Owen\"\nemail = \"void@some.where\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.git.GitUser.name","title":"name","text":"<pre><code>name: str = field(default_factory=get_git_author_name)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.git.GitUser.email","title":"email","text":"<pre><code>email: str = field(default_factory=get_git_author_email)\n</code></pre>"},{"location":"reference/api/config/#github","title":"GitHub","text":""},{"location":"reference/api/config/#dda.config.model.github.GitHubConfig","title":"GitHubConfig","text":""},{"location":"reference/api/config/#dda.config.model.github.GitHubConfig.auth","title":"auth","text":"<pre><code>auth: GitHubAuth = field(default_factory=GitHubAuth)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.github.GitHubAuth","title":"GitHubAuth","text":"config.toml <pre><code>[github.auth]\nuser = \"username\"\ntoken = \"*****\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.github.GitHubAuth.user","title":"user","text":"<pre><code>user: str = ''\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.github.GitHubAuth.token","title":"token","text":"<pre><code>token: str = ''\n</code></pre>"},{"location":"reference/api/config/#organization","title":"Organization","text":""},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig","title":"OrgConfig","text":"config.toml <pre><code>[orgs.default]\napi_key = \"*****\"\napp_key = \"*****\"\nsite = \"datadoghq.com\"\ndd_url = \"https://app.datadoghq.com\"\nlogs_url = \"\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.api_key","title":"api_key","text":"<pre><code>api_key: str = os.environ.get('DD_API_KEY', '')\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.app_key","title":"app_key","text":"<pre><code>app_key: str = os.environ.get('DD_APP_KEY', '')\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.site","title":"site","text":"<pre><code>site: str = os.environ.get('DD_SITE', 'datadoghq.com')\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.dd_url","title":"dd_url","text":"<pre><code>dd_url: str = os.environ.get(\"DD_DD_URL\", \"https://app.datadoghq.com\")\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.logs_url","title":"logs_url","text":"<pre><code>logs_url: str = os.environ.get('DD_LOGS_CONFIG_LOGS_DD_URL', '')\n</code></pre>"},{"location":"reference/api/config/#terminal","title":"Terminal","text":""},{"location":"reference/api/config/#dda.config.model.terminal.TerminalConfig","title":"TerminalConfig","text":"config.toml <pre><code>[terminal]\nverbosity = 0\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalConfig.verbosity","title":"verbosity","text":"<pre><code>verbosity: Verbosity = INFO\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalConfig.styles","title":"styles","text":"<pre><code>styles: TerminalStyles = field(default_factory=TerminalStyles)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles","title":"TerminalStyles","text":"<p>Styling documentation:</p> <ul> <li>Syntax</li> <li>Standard colors</li> </ul>  config.toml <pre><code>[terminal.styles]\nerror = \"bold red\"\nwarning = \"bold yellow\"\ninfo = \"bold\"\nsuccess = \"bold cyan\"\nwaiting = \"bold magenta\"\ndebug = \"bold on bright_black\"\nspinner = \"simpleDotsScrolling\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.error","title":"error","text":"<pre><code>error: str = 'bold red'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.warning","title":"warning","text":"<pre><code>warning: str = 'bold yellow'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.info","title":"info","text":"<pre><code>info: str = 'bold'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.success","title":"success","text":"<pre><code>success: str = 'bold cyan'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.waiting","title":"waiting","text":"<pre><code>waiting: str = 'bold magenta'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.debug","title":"debug","text":"<pre><code>debug: str = 'bold on bright_black'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.spinner","title":"spinner","text":"<pre><code>spinner: str = 'simpleDotsScrolling'\n</code></pre> <p>The list of available spinners can be found here.</p>"},{"location":"reference/api/config/#update","title":"Update","text":""},{"location":"reference/api/config/#dda.config.model.update.UpdateConfig","title":"UpdateConfig","text":"config.toml <pre><code>[update]\nmode = \"check\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.update.UpdateConfig.mode","title":"mode","text":"<pre><code>mode: Literal['off', 'check'] = 'check'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.update.UpdateConfig.check","title":"check","text":"<pre><code>check: UpdateCheckConfig = field(default_factory=UpdateCheckConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.update.UpdateCheckConfig","title":"UpdateCheckConfig","text":"config.toml <pre><code>[update.check]\nperiod = \"2w\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.update.UpdateCheckConfig.period","title":"period","text":"<pre><code>period: str = '2w'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.update.UpdateCheckConfig.get_period_seconds","title":"get_period_seconds","text":"<pre><code>get_period_seconds() -&gt; int\n</code></pre>"},{"location":"reference/api/constants/","title":"Constants reference","text":""},{"location":"reference/api/constants/#dda.config.constants.Verbosity","title":"Verbosity","text":""},{"location":"reference/api/constants/#dda.config.constants.Verbosity.SILENT","title":"SILENT","text":"<pre><code>SILENT = -3\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.ERROR","title":"ERROR","text":"<pre><code>ERROR = -2\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.WARNING","title":"WARNING","text":"<pre><code>WARNING = -1\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.INFO","title":"INFO","text":"<pre><code>INFO = 0\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.VERBOSE","title":"VERBOSE","text":"<pre><code>VERBOSE = 1\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.DEBUG","title":"DEBUG","text":"<pre><code>DEBUG = 2\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.TRACE","title":"TRACE","text":"<pre><code>TRACE = 3\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars","title":"AppEnvVars","text":""},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.INTERACTIVE","title":"INTERACTIVE","text":"<pre><code>INTERACTIVE = 'DDA_INTERACTIVE'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.QUIET","title":"QUIET","text":"<pre><code>QUIET = 'DDA_QUIET'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.VERBOSE","title":"VERBOSE","text":"<pre><code>VERBOSE = 'DDA_VERBOSE'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.NO_DYNAMIC_DEPS","title":"NO_DYNAMIC_DEPS","text":"<pre><code>NO_DYNAMIC_DEPS = 'DDA_NO_DYNAMIC_DEPS'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.TELEMETRY_API_KEY","title":"TELEMETRY_API_KEY","text":"<pre><code>TELEMETRY_API_KEY = 'DDA_TELEMETRY_API_KEY'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.NO_COLOR","title":"NO_COLOR","text":"<pre><code>NO_COLOR = 'NO_COLOR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.FORCE_COLOR","title":"FORCE_COLOR","text":"<pre><code>FORCE_COLOR = 'FORCE_COLOR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars","title":"ConfigEnvVars","text":""},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars.DATA","title":"DATA","text":"<pre><code>DATA = 'DDA_DATA_DIR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars.CACHE","title":"CACHE","text":"<pre><code>CACHE = 'DDA_CACHE_DIR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars.CONFIG","title":"CONFIG","text":"<pre><code>CONFIG = 'DDA_CONFIG'\n</code></pre>"},{"location":"reference/api/date/","title":"Date utilities reference","text":""},{"location":"reference/api/date/#dda.utils.date.parse_imf_date","title":"parse_imf_date","text":"<pre><code>parse_imf_date(data: str) -&gt; datetime\n</code></pre> <p>Parse a date value using the Internet Message Format (IMF) as defined by RFC 5322.</p> <p>This is the date format used by the HTTP and email specifications, among others.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The date value to parse.</p> required <p>Returns:</p> Type Description <code>datetime</code> <p>A <code>datetime</code> object representing the parsed date.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the date value is not valid.</p>"},{"location":"reference/api/fs/","title":"Filesystem reference","text":""},{"location":"reference/api/fs/#dda.utils.fs.temp_directory","title":"temp_directory","text":"<pre><code>temp_directory() -&gt; Generator[Path, None, None]\n</code></pre> <p>A context manager that creates a temporary directory and yields a path to it. Example:</p> <pre><code>with temp_directory() as temp_dir:\n    ...\n</code></pre> <p>Yields:</p> Type Description <code>Path</code> <p>The resolved path to the temporary directory, following all symlinks.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path","title":"Path","text":"<p>               Bases: <code>Path</code></p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.long_id","title":"long_id","text":"<pre><code>long_id: str\n</code></pre> <p>Returns a SHA-256 hashed, URL-safe base64 encoded representation of the current path. This is useful on case-insensitive filesystems to identify paths that are the same.</p> <p>Caveat</p> <p>This identifier considers the filesystem to be case-insensitive on macOS. Although that is not a technical guarantee, it is in practice true.</p> <p>Returns:</p> Type Description <code>str</code> <p>A unique identifier for the current path.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.id","title":"id","text":"<pre><code>id: str\n</code></pre> <p>Returns:</p> Type Description <code>str</code> <p>The first 8 characters of the long ID.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.ensure_dir","title":"ensure_dir","text":"<pre><code>ensure_dir() -&gt; None\n</code></pre> <p>Ensure the current path is a directory. Equivalent to calling <code>Path.mkdir</code> with <code>parents=True</code> and <code>exist_ok=True</code>.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.expand","title":"expand","text":"<pre><code>expand() -&gt; Path\n</code></pre> <p>Expand the current path by resolving the user home directory and environment variables.</p> <p>Returns:</p> Type Description <code>Path</code> <p>The new expanded path.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.write_atomic","title":"write_atomic","text":"<pre><code>write_atomic(data: str | bytes, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Atomically write data to the current path. This is equivalent to the following:</p> <pre><code>with path.open_atomic(\"w\", encoding=\"utf-8\") as f:\n    f.write(data)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | bytes</code> <p>The data to write.</p> required <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to <code>os.fdopen</code>.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>os.fdopen</code>.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.open_atomic","title":"open_atomic","text":"<pre><code>open_atomic(\n    *args: Any, **kwargs: Any\n) -&gt; Generator[IO[Any], None, None]\n</code></pre> <p>Atomically open a file for writing.</p> <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to <code>os.fdopen</code>.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>os.fdopen</code>.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.as_cwd","title":"as_cwd","text":"<pre><code>as_cwd() -&gt; Generator[Path, None, None]\n</code></pre> <p>A context manager that changes the current working directory to the current path. Example:</p> <pre><code>with Path(\"foo\").as_cwd():\n    ...\n</code></pre> <p>Yields:</p> Type Description <code>Path</code> <p>The current path.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.as_exe","title":"as_exe","text":"<pre><code>as_exe() -&gt; Path\n</code></pre> <p>Return the current path with the appropriate executable suffix.</p>"},{"location":"reference/api/platform/","title":"Platform reference","text":""},{"location":"reference/api/platform/#dda.utils.platform.PLATFORM_ID","title":"PLATFORM_ID","text":"<pre><code>PLATFORM_ID = __PLATFORM_ID\n</code></pre> <p>A short identifier for the current platform. Known values:</p> <ul> <li><code>linux</code></li> <li><code>windows</code></li> <li><code>macos</code></li> </ul>"},{"location":"reference/api/platform/#dda.utils.platform.PLATFORM_NAME","title":"PLATFORM_NAME","text":"<pre><code>PLATFORM_NAME = __PLATFORM_NAME\n</code></pre> <p>The human readable name of the current platform. Known values:</p> <ul> <li>Linux</li> <li>Windows</li> <li>macOS</li> </ul>"},{"location":"reference/api/platform/#dda.utils.platform.DEFAULT_SHELL","title":"DEFAULT_SHELL","text":"<pre><code>DEFAULT_SHELL = __DEFAULT_SHELL\n</code></pre> <p>The default shell for the current platform. Values are taken from environment variables, with platform-specific fallbacks.</p> Platform Environment variables Fallback <code>linux</code> <code>SHELL</code> <code>bash</code> <code>windows</code> <code>SHELL</code>, <code>COMSPEC</code> <code>cmd</code> <code>macos</code> <code>SHELL</code> <code>zsh</code>"},{"location":"reference/api/platform/#dda.utils.platform.which","title":"which","text":"<pre><code>which(name: str) -&gt; str | None\n</code></pre> <p>This is equivalent to shutil.which except on Windows, where extensions will no longer be entirely capitalized.</p>"},{"location":"reference/api/platform/#dda.utils.platform.join_command_args","title":"join_command_args","text":"<pre><code>join_command_args(args: list[str]) -&gt; str\n</code></pre> <p>Create a valid shell command from a list of arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list[str]</code> <p>A list of command line arguments.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A single string of command line arguments.</p>"},{"location":"reference/api/platform/#dda.utils.platform.get_machine_id","title":"get_machine_id","text":"<pre><code>get_machine_id() -&gt; UUID\n</code></pre> <p>Get a unique identifier for the current machine that is consistent across reboots and different processes. The following platform-specific methods are given priority:</p> Platform Method <code>linux</code> The <code>/sys/class/dmi/id/product_uuid</code>, <code>/etc/machine-id</code> or <code>/var/lib/dbus/machine-id</code> files <code>windows</code> The <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid</code> registry key <code>macos</code> The <code>IOPlatformUUID</code> property of the <code>IOPlatformExpertDevice</code> node in the I/O Registry <p>As a fallback, the ID will be generated using the MAC address.</p>"},{"location":"reference/api/process/","title":"Process reference","text":""},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner","title":"SubprocessRunner","text":"<p>A class for managing the execution of external commands. This is available as the <code>Application.subprocess</code> property.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.run","title":"run","text":"<pre><code>run(\n    command: list[str],\n    *,\n    check: bool = True,\n    env: dict[str, str] | None = None,\n    cwd: str | Path | None = None,\n    encoding: str = \"utf-8\",\n) -&gt; int\n</code></pre> <p>Run a command and wait for it to complete.</p> <p>Warning</p> <p>On Windows, programs that require user interaction should use the <code>attach</code> method instead.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to run.</p> required <code>check</code> <code>bool</code> <p>Whether to abort the application if the command exits with a non-zero exit code.</p> <code>True</code> <code>env</code> <code>dict[str, str] | None</code> <p>The environment variables to include in the command's environment.</p> <code>None</code> <code>cwd</code> <code>str | Path | None</code> <p>The working directory in which to run the command.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>The encoding used to decode the command's output.</p> <code>'utf-8'</code> <p>Returns:</p> Type Description <code>int</code> <p>The command's exit code.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.capture","title":"capture","text":"<pre><code>capture(\n    command: list[str],\n    *,\n    cross_streams: bool = True,\n    show: bool = False,\n    check: bool = True,\n    env: dict[str, str] | None = None,\n    cwd: str | Path | None = None,\n    encoding: str = \"utf-8\",\n    **kwargs: Any,\n) -&gt; str\n</code></pre> <p>Run a command and capture its output.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to run.</p> required <code>cross_streams</code> <code>bool</code> <p>Whether to merge the command's standard error stream into its standard output stream.</p> <code>True</code> <code>show</code> <code>bool</code> <p>Whether to display the command's output while capturing it.</p> <code>False</code> <code>check</code> <code>bool</code> <p>Whether to abort the application if the command exits with a non-zero exit code.</p> <code>True</code> <code>env</code> <code>dict[str, str] | None</code> <p>The environment variables to include in the command's environment.</p> <code>None</code> <code>cwd</code> <code>str | Path | None</code> <p>The working directory in which to run the command.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>The encoding used to decode the command's output.</p> <code>'utf-8'</code> <p>Returns:</p> Type Description <code>str</code> <p>The command's standard output.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>attach</code> method when <code>show</code> is <code>False</code>.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.wait","title":"wait","text":"<pre><code>wait(\n    command: list[str],\n    *,\n    message: str = \"\",\n    check: bool = True,\n    env: dict[str, str] | None = None,\n    cwd: str | Path | None = None,\n    encoding: str = \"utf-8\",\n) -&gt; None\n</code></pre> <p>Run a command and wait for it to complete. By default, the command output is hidden but will be displayed if the configured verbosity level is at least <code>Verbosity.VERBOSE</code>. Under that circumstance, this method is a mere pass-through to the <code>run</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to run.</p> required <code>message</code> <code>str</code> <p>The message to display while the command is running. Has no effect if the verbosity level is less than <code>Verbosity.VERBOSE</code>.</p> <code>''</code> <code>check</code> <code>bool</code> <p>Whether to abort the application if the command exits with a non-zero exit code.</p> <code>True</code> <code>env</code> <code>dict[str, str] | None</code> <p>The environment variables to include in the command's environment.</p> <code>None</code> <code>cwd</code> <code>str | Path | None</code> <p>The working directory in which to run the command.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>The encoding used to decode the command's output.</p> <code>'utf-8'</code>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.redirect","title":"redirect","text":"<pre><code>redirect(\n    command: list[str] | str,\n    *,\n    stream: BinaryIO,\n    cross_streams: bool = True,\n    **kwargs: Any,\n) -&gt; CompletedProcess\n</code></pre> <p>Redirect the output of a command to a binary writable file-like object. Example usage:</p> <pre><code>with open(\"latest.zip\", \"wb\") as stream:\n    app.subprocess.redirect(\n        [\"git\", \"archive\", \"--format=zip\", \"HEAD\"],\n        stream=stream,\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str] | str</code> <p>The command to run.</p> required <code>stream</code> <code>BinaryIO</code> <p>The binary stream with which to redirect the command's output.</p> required <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The completed process.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>attach</code> method.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.exit_with","title":"exit_with","text":"<pre><code>exit_with(\n    command: list[str],\n    *,\n    env: dict[str, str] | None = None,\n    cwd: str | Path | None = None,\n    encoding: str = \"utf-8\",\n) -&gt; NoReturn\n</code></pre> <p>Run a command and abort with the command's exit code.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to run.</p> required <code>cwd</code> <code>str | Path | None</code> <p>The working directory in which to run the command.</p> <code>None</code> <code>env</code> <code>dict[str, str] | None</code> <p>The environment variables to include in the command's environment.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>The encoding used to decode the command's output.</p> <code>'utf-8'</code>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.attach","title":"attach","text":"<pre><code>attach(command: list[str] | str, **kwargs: Any) -&gt; CompletedProcess\n</code></pre> <p>Run a command and wait for it to complete. By default, the command inherits the current process's standard input, output, and error streams.</p> <p>The <code>check</code> keyword argument defaults to <code>True</code>. When set to <code>True</code> and the command exits with a non-zero exit code, the application will abort using the command's exit code rather than raising an exception.</p> <p>Warning</p> <p>This method does not support sending telemetry upon errors and should only be preferred over <code>run</code> when the command requires user interaction.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str] | str</code> <p>The command to run.</p> required <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The completed process.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>subprocess.run</code>.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.spawn_daemon","title":"spawn_daemon","text":"<pre><code>spawn_daemon(command: list[str] | str, **kwargs: Any) -&gt; int\n</code></pre> <p>Spawn a daemon process that is detached from the current process.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str] | str</code> <p>The command to run.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Popen</code> constructor.</p>"},{"location":"reference/api/process/#dda.utils.process.EnvVars","title":"EnvVars","text":"<pre><code>EnvVars(\n    env_vars: dict[str, str] | None = None,\n    *,\n    include: list[str] | None = None,\n    exclude: list[str] | None = None,\n)\n</code></pre> <p>This class is a snapshot of the current process' environment variables at the time of instantiation.</p> <p>Setting environment variables for subprocesses becomes easy, rather than having to manually make a copy of the current environment variables and updating it:</p> <pre><code>app.subprocess.run([...], env=EnvVars({\"FOO\": \"bar\"}))\n</code></pre> <p>Instances may also be used as a context manager to temporarily update <code>os.environ</code> for the current process:</p> <pre><code>with EnvVars({\"FOO\": \"bar\"}):\n    ...\n</code></pre> <p>Warning</p> <p>It's undesirable to persist instances for long periods of time because the environment variables may change during the lifetime of the instance.</p> <p>Parameters:</p> Name Type Description Default <code>env_vars</code> <code>dict[str, str] | None</code> <p>Additional environment variables to include in the snapshot. These override existing environment variables and are unaffected by the <code>include</code> and <code>exclude</code> filtering parameters.</p> <code>None</code> <code>include</code> <code>list[str] | None</code> <p>A list of glob patterns used to include environment variables in the snapshot.</p> <code>None</code> <code>exclude</code> <code>list[str] | None</code> <p>A list of glob patterns used to exclude environment variables from the snapshot. This takes precedence over the <code>include</code> parameter.</p> <code>None</code>"},{"location":"reference/api/retry/","title":"Retry utilities reference","text":""},{"location":"reference/api/retry/#dda.utils.retry.wait_for","title":"wait_for","text":"<pre><code>wait_for(\n    condition: Callable[[], Any],\n    *,\n    timeout: float = 60,\n    interval: float | None = None,\n    **kwargs: Any,\n) -&gt; Any\n</code></pre> <p>Wait for a condition to be met. The following exceptions influence the retry logic:</p> <ul> <li><code>FailFastError</code></li> <li><code>DelayedError</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[], Any]</code> <p>A callable responsible for checking the condition. A condition is considered satisfied if it does not raise an exception.</p> required <code>timeout</code> <code>float</code> <p>The maximum time to wait for the condition to be met.</p> <code>60</code> <code>interval</code> <code>float | None</code> <p>The interval between retries. This is equivalent to setting both <code>min_delay</code> and <code>max_delay</code> to the same value, effectively disabling the exponential backoff.</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>The result of the condition.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>backoff_delays</code>.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>The final exception is re-raised if a timeout occurs or the maximum number of attempts is reached.</p>"},{"location":"reference/api/retry/#dda.utils.retry.FailFastError","title":"FailFastError","text":"<p>An exception indicating that the operation should not be retried.</p> <p>Parameters:</p> Name Type Description Default <code>cause</code> <code>Exception</code> <p>The cause of the failure.</p> required"},{"location":"reference/api/retry/#dda.utils.retry.DelayedError","title":"DelayedError","text":"<p>An exception indicating that the next attempt should occur after a specific delay.</p> <p>Parameters:</p> Name Type Description Default <code>cause</code> <code>Exception</code> <p>The cause of the failure.</p> required <code>delay</code> <code>float</code> <p>The delay in seconds.</p> required"},{"location":"reference/api/retry/#dda.utils.retry.backoff_delays","title":"backoff_delays","text":"<pre><code>backoff_delays(\n    *,\n    max_retries: int | None = None,\n    max_delay: float = 30,\n    min_delay: float = 1,\n    factor: float = 3,\n) -&gt; Iterator[float]\n</code></pre> <p>Generate a sequence of delays using truncated exponential backoff with \"decorrelated jitter\".</p> <p>Parameters:</p> Name Type Description Default <code>max_retries</code> <code>int | None</code> <p>The maximum number of retries.</p> <code>None</code> <code>max_delay</code> <code>float</code> <p>The maximum delay.</p> <code>30</code> <code>min_delay</code> <code>float</code> <p>The minimum delay.</p> <code>1</code> <code>factor</code> <code>float</code> <p>The growth factor of the delay range.</p> <code>3</code>"},{"location":"reference/api/telemetry/","title":"Telemetry reference","text":""},{"location":"reference/api/telemetry/#dda.telemetry.manager.TelemetryManager","title":"TelemetryManager","text":"<p>A class for sending various forms of telemetry. This is available as the <code>Application.telemetry</code> property.</p>"},{"location":"reference/api/telemetry/#dda.telemetry.manager.TelemetryManager.enabled","title":"enabled","text":"<pre><code>enabled: bool\n</code></pre> <p>Whether the user has not dissented to telemetry.</p>"},{"location":"reference/api/telemetry/#dda.telemetry.manager.TelemetryManager.log","title":"log","text":"<pre><code>log: LogTelemetryWriter\n</code></pre>"},{"location":"reference/api/telemetry/#dda.telemetry.manager.TelemetryManager.trace","title":"trace","text":"<pre><code>trace: TraceTelemetryWriter\n</code></pre>"},{"location":"reference/api/telemetry/#dda.telemetry.writers.log.LogTelemetryWriter","title":"LogTelemetryWriter","text":""},{"location":"reference/api/telemetry/#dda.telemetry.writers.log.LogTelemetryWriter.write","title":"write","text":"<pre><code>write(data: dict[str, Any]) -&gt; None\n</code></pre> <p>Send a log message to Datadog. Example:</p> <pre><code>app.telemetry.log.write({\n    \"message\": \"Hello, world!\",\n    \"level\": \"info\",\n    \"ddtags\": \"foo:bar,baz:qux\",\n})\n</code></pre> <p>The following fields have default values:</p> Field Default value <code>service</code> <code>dda</code> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The log attributes to send.</p> required"},{"location":"reference/api/telemetry/#dda.telemetry.writers.trace.TraceTelemetryWriter","title":"TraceTelemetryWriter","text":""},{"location":"reference/api/telemetry/#dda.telemetry.writers.trace.TraceTelemetryWriter.span","title":"span","text":"<pre><code>span(data: dict[str, Any]) -&gt; None\n</code></pre> <p>Send a trace span to Datadog. Example:</p> <pre><code>app.telemetry.trace.span({\n    \"start\": time.time_ns(),\n    \"error\": 0,\n    \"meta\": {\n        \"foo.bar\": \"baz\",\n    },\n})\n</code></pre> <p>The following fields have default values:</p> Field Default value <code>service</code> <code>dda</code> <code>trace_id</code> A random 64-bit integer. <code>span_id</code> A random 64-bit integer. <code>parent_id</code> <code>0</code> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The span to send.</p> required"},{"location":"reference/api/terminal/","title":"Terminal utilities reference","text":""},{"location":"reference/api/terminal/#dda.utils.terminal.remove_ansi","title":"remove_ansi","text":"<pre><code>remove_ansi(text: str) -&gt; str\n</code></pre> <p>This strips out ANSI escape sequences from the given text.</p> <p>Note</p> <p>Not every sequence is supported.</p>"},{"location":"reference/api/terminal/#dda.utils.terminal.terminal_size","title":"terminal_size","text":"<pre><code>terminal_size() -&gt; terminal_size\n</code></pre> <p>This returns the same value as get_terminal_size but the first call is cached.</p>"},{"location":"reference/api/terminal/#dda.utils.terminal.get_terminal_size","title":"get_terminal_size","text":"<pre><code>get_terminal_size(\n    fallback: tuple[int, int] = (80, 24),\n) -&gt; terminal_size\n</code></pre> <p>This is a copy of the shutil.get_terminal_size function from the standard library. This is required to properly configure the CLI at startup but importing <code>shutil</code> is costly.</p>"},{"location":"reference/api/tools/","title":"Tools reference","text":""},{"location":"reference/api/tools/#dda.tools.Tools","title":"Tools","text":"<p>This is available as the <code>Application.tools</code> property.</p>"},{"location":"reference/api/tools/#dda.tools.Tools.docker","title":"docker","text":"<pre><code>docker: Docker\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.Tools.go","title":"go","text":"<pre><code>go: Go\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.Tools.uv","title":"uv","text":"<pre><code>uv: UV\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.docker.Docker","title":"Docker","text":"<p>If <code>docker</code> is not on the PATH, this will try to use <code>podman</code> instead. Additionally, Docker CLI hints are disabled to have less verbosity and a more consistent experience across different Docker-compatible tools.</p> <p>Example usage:</p> <pre><code>app.tools.docker.run([\"build\", \".\", \"--tag\", \"my-image\"])\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.go.Go","title":"Go","text":"<p>This will automatically set the <code>GOTOOLCHAIN</code> environment variable to the proper version based on files in the current directory. The following files are considered, in order of precedence:</p> <ul> <li><code>.go-version</code></li> <li><code>go.mod</code></li> <li><code>go.work</code></li> </ul> <p>Example usage:</p> <pre><code>app.tools.go.run([\"build\", \".\"])\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.uv.UV","title":"UV","text":"<p>This will use the UV executable that comes with <code>dda</code>.</p> <p>Example usage:</p> <pre><code>app.tools.uv.run([\"pip\", \"tree\"])\n</code></pre> <p>This also makes modifying the installation of UV itself safe on Windows.</p>"},{"location":"reference/api/container/model/","title":"Container model reference","text":""},{"location":"reference/api/container/model/#dda.utils.container.model.Mount","title":"Mount","text":"<p>This represents mount configuration for a container.</p>"},{"location":"reference/api/container/model/#dda.utils.container.model.Mount.type","title":"type","text":"<pre><code>type: Literal['bind', 'volume']\n</code></pre> <p>The type of mount, either <code>bind</code> or <code>volume</code>.</p>"},{"location":"reference/api/container/model/#dda.utils.container.model.Mount.path","title":"path","text":"<pre><code>path: str\n</code></pre> <p>The path where the file or directory is mounted in the container.</p>"},{"location":"reference/api/container/model/#dda.utils.container.model.Mount.source","title":"source","text":"<pre><code>source: str | None = None\n</code></pre> <p>For bind mounts, this is the path to the file or directory on the host. For volume mounts, this is the name of the volume. Anonymous volumes must not set this.</p>"},{"location":"reference/api/container/model/#dda.utils.container.model.Mount.read_only","title":"read_only","text":"<pre><code>read_only: bool = False\n</code></pre> <p>Whether the mount is read-only.</p>"},{"location":"reference/api/container/model/#dda.utils.container.model.Mount.volume_options","title":"volume_options","text":"<pre><code>volume_options: dict[str, str] = {}\n</code></pre> <p>Additional options for the <code>volume</code> mounts.</p>"},{"location":"reference/api/container/model/#dda.utils.container.model.Mount.as_csv","title":"as_csv","text":"<pre><code>as_csv() -&gt; str\n</code></pre> <p>This returns a CSV representation of the mount configuration. This can be used directly by the <code>--mount</code> flag of the <code>docker run</code> command.</p>"},{"location":"reference/api/network/http/","title":"HTTP reference","text":""},{"location":"reference/api/network/http/#dda.utils.network.http.manager.HTTPClientManager","title":"HTTPClientManager","text":"<p>A class for managing HTTP clients. This is available as the <code>Application.http</code> property.</p>"},{"location":"reference/api/network/http/#dda.utils.network.http.manager.HTTPClientManager.client","title":"client","text":"<pre><code>client(**kwargs: Any) -&gt; HTTPClient\n</code></pre> <p>Returns:</p> Type Description <code>HTTPClient</code> <p>An <code>HTTPClient</code> instance with proper default configuration.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>get_http_client</code> function.</p>"},{"location":"reference/api/network/http/#dda.utils.network.http.client.HTTPClient","title":"HTTPClient","text":"<p>               Bases: <code>Client</code></p> <p>A subclass of <code>httpx.Client</code> that intelligently retries requests.</p> <p>Warning</p> <p>This class should never be used directly. Instead, use the <code>get_http_client</code> function.</p>"},{"location":"reference/api/network/http/#dda.utils.network.http.client.get_http_client","title":"get_http_client","text":"<pre><code>get_http_client(**kwargs: Any) -&gt; HTTPClient\n</code></pre> <p>Prefer using the <code>Application.http</code> property instead.</p> <pre><code>with app.http.client() as client:\n    client.get(\"https://example.com\")\n</code></pre> <p>Returns:</p> Type Description <code>HTTPClient</code> <p>An <code>HTTPClient</code> instance with proper default configuration.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>HTTPClient</code> constructor.</p>"},{"location":"reference/cli/","title":"CLI","text":""},{"location":"reference/cli/#verbosity","title":"Verbosity","text":"<p>The amount of displayed output is controlled solely by the <code>-v</code>/<code>--verbose</code> (environment variable <code>AppEnvVars.VERBOSE</code>) and <code>-q</code>/<code>--quiet</code> (environment variable <code>AppEnvVars.QUIET</code>) root options.</p> <p>The levels are defined by the <code>Verbosity</code> enum.</p>"},{"location":"reference/cli/#tab-completion","title":"Tab completion","text":"<p>Completion is achieved by saving a script and then executing it as a part of your shell's startup sequence.</p> <p>Afterward, you'll need to start a new shell in order for the changes to take effect.</p> zshbashfish <p>Save the script somewhere:</p> <pre><code>_DDA_COMPLETE=zsh_source dda &gt; ~/.dda-complete.zsh\n</code></pre> <p>Source the file in <code>~/.zshrc</code>:</p> <pre><code>. ~/.dda-complete.zsh\n</code></pre> <p>Save the script somewhere:</p> <pre><code>_DDA_COMPLETE=bash_source dda &gt; ~/.dda-complete.bash\n</code></pre> <p>Source the file in <code>~/.bashrc</code> (or <code>~/.bash_profile</code> if on macOS):</p> <pre><code>. ~/.dda-complete.bash\n</code></pre> <p>Save the script in <code>~/.config/fish/completions</code>:</p> <pre><code>_DDA_COMPLETE=fish_source dda &gt; ~/.config/fish/completions/dda.fish\n</code></pre>"},{"location":"reference/cli/commands/","title":"dda","text":"<p>Usage:</p> <pre><code>dda [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbose</code>, <code>-v</code> integer range (<code>0</code> and above) Increase verbosity (can be used additively) [env var: <code>DDA_VERBOSE</code>] None <code>--quiet</code>, <code>-q</code> integer range (<code>0</code> and above) Decrease verbosity (can be used additively) [env var: <code>DDA_QUIET</code>] None <code>--color</code> / <code>--no-color</code> boolean Whether or not to display colored output (default is auto-detection) [env vars: <code>FORCE_COLOR</code>/<code>NO_COLOR</code>] None <code>--interactive</code> / <code>--no-interactive</code> boolean Whether or not to allow features like prompts and progress bars (default is auto-detection) [env var: <code>DDA_INTERACTIVE</code>] None <code>--data-dir</code> text The path to a custom directory used to persist data [env var: <code>DDA_DATA_DIR</code>] None <code>--cache-dir</code> text The path to a custom directory used to cache data [env var: <code>DDA_CACHE_DIR</code>] None <code>--config</code> text The path to a custom config file to use [env var: <code>DDA_CONFIG</code>] None <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-build","title":"dda build","text":"<p>Manage builds</p> <p>Usage:</p> <pre><code>dda build [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-build-bazel","title":"dda build bazel","text":"<p>Run Bazel commands</p> <p>Usage:</p> <pre><code>dda build bazel [OPTIONS] [ARGS]...\n</code></pre>"},{"location":"reference/cli/commands/#dda-config","title":"dda config","text":"<p>Manage the config file</p> <p>Usage:</p> <pre><code>dda config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-explore","title":"dda config explore","text":"<p>Open the config location in your file manager.</p> <p>Usage:</p> <pre><code>dda config explore [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-find","title":"dda config find","text":"<p>Output the location of the config file.</p> <p>Usage:</p> <pre><code>dda config find [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-restore","title":"dda config restore","text":"<p>Restore the config file to default settings.</p> <p>Usage:</p> <pre><code>dda config restore [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-set","title":"dda config set","text":"<p>Set the value of config keys. If the value is omitted, you will be prompted, with the input hidden if it is sensitive.</p> <p>Usage:</p> <pre><code>dda config set [OPTIONS] KEY [VALUE]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-show","title":"dda config show","text":"<p>Render the contents of the config file.</p> <p>Usage:</p> <pre><code>dda config show [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--all</code>, <code>-a</code> boolean Do not scrub secret fields <code>False</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env","title":"dda env","text":"<p>Work with environments</p> <p>Usage:</p> <pre><code>dda env [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev","title":"dda env dev","text":"<p>Work with developer environments</p> <p>Usage:</p> <pre><code>dda env dev [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-cache","title":"dda env dev cache","text":"<p>Manage the cache</p> <p>Usage:</p> <pre><code>dda env dev cache [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-cache-remove","title":"dda env dev cache remove","text":"<p>Remove the cache.</p> <p>Usage:</p> <pre><code>dda env dev cache remove [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-cache-size","title":"dda env dev cache size","text":"<p>Show the cache size.</p> <p>Usage:</p> <pre><code>dda env dev cache size [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-code","title":"dda env dev code","text":"<p>Open a code editor for the developer environment.</p> <p>Usage:</p> <pre><code>dda env dev code [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--repo</code>, <code>-r</code> text The Datadog repository to work on None <code>--editor</code>, <code>-e</code> choice (<code>cursor</code> | <code>vscode</code>) The editor to use, overriding any configured editor None <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-gui","title":"dda env dev gui","text":"<p>Access a developer environment through a graphical interface.</p> <p>Usage:</p> <pre><code>dda env dev gui [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-ls","title":"dda env dev ls","text":"<p>List the available developer environments.</p> <p>Usage:</p> <pre><code>dda env dev ls [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-remove","title":"dda env dev remove","text":"<p>Remove a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev remove [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-run","title":"dda env dev run","text":"<p>Run a command within a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev run [OPTIONS] ARGS...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--repo</code>, <code>-r</code> text The Datadog repository in which to run the command None"},{"location":"reference/cli/commands/#dda-env-dev-shell","title":"dda env dev shell","text":"<p>Spawn a shell within a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev shell [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--repo</code>, <code>-r</code> text The Datadog repository in which to enter None <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-start","title":"dda env dev start","text":"<p>Start a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev start [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-status","title":"dda env dev status","text":"<p>Check the status of a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev status [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-stop","title":"dda env dev stop","text":"<p>Stop a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev stop [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>-r</code>, <code>--remove</code> boolean Remove the environment after stopping <code>False</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-inv","title":"dda inv","text":"<p>Invoke a local task.</p> <p>Usage:</p> <pre><code>dda inv [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--feat</code> text Extra features to install (multiple allowed). After a feature is installed once, it will always be available. None <code>--dep</code> text Extra dependencies to install (multiple allowed). After a dependency is installed once, it will always be available. None <code>--repo</code> directory Allows running invoke task from another repository than the one in the current working directory. Pass in a path to a local clone of this other repository. None <code>--no-dynamic-deps</code> boolean Assume required dependencies are already installed. <code>False</code>"},{"location":"reference/cli/commands/#dda-self","title":"dda self","text":"<p>Manage dda</p> <p>Usage:</p> <pre><code>dda self [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-dep","title":"dda self dep","text":"<p>Manage dda's dependencies</p> <p>Usage:</p> <pre><code>dda self dep [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-dep-lock","title":"dda self dep lock","text":"<p>Lock dependencies.</p> <p>Usage:</p> <pre><code>dda self dep lock [OPTIONS] [ARGS]...\n</code></pre>"},{"location":"reference/cli/commands/#dda-self-dep-show","title":"dda self dep show","text":"<p>Show all installed dependencies.</p> <p>Example:</p> <pre><code>dda self dep show\n</code></pre> <p>Usage:</p> <pre><code>dda self dep show [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--legacy</code> boolean Only show legacy invoke dependencies <code>False</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-dep-sync","title":"dda self dep sync","text":"<p>Synchronize dependencies.</p> <p>Example:</p> <pre><code>dda self dep sync -f foo -f bar\n</code></pre> <p>Usage:</p> <pre><code>dda self dep sync [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--feature</code> text Feature to synchronize (multiple allowed) None <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-mcp-server","title":"dda self mcp-server","text":"<p>Manage the MCP server</p> <p>Usage:</p> <pre><code>dda self mcp-server [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-mcp-server-log","title":"dda self mcp-server log","text":"<p>Display the MCP server log.</p> <p>Usage:</p> <pre><code>dda self mcp-server log [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-mcp-server-start","title":"dda self mcp-server start","text":"<p>Start the MCP server.</p> <p>Usage:</p> <pre><code>dda self mcp-server start [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--port</code> integer The port used to run the server <code>9000</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-mcp-server-status","title":"dda self mcp-server status","text":"<p>Display the MCP server status.</p> <p>Usage:</p> <pre><code>dda self mcp-server status [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-mcp-server-stop","title":"dda self mcp-server stop","text":"<p>Stop the MCP server.</p> <p>Usage:</p> <pre><code>dda self mcp-server stop [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry","title":"dda self telemetry","text":"<p>Manage telemetry submission</p> <p>Usage:</p> <pre><code>dda self telemetry [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-log","title":"dda self telemetry log","text":"<p>Manage daemon logging</p> <p>Usage:</p> <pre><code>dda self telemetry log [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-log-remove","title":"dda self telemetry log remove","text":"<p>Clear the log.</p> <p>Usage:</p> <pre><code>dda self telemetry log remove [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-log-show","title":"dda self telemetry log show","text":"<p>Show the log.</p> <p>Usage:</p> <pre><code>dda self telemetry log show [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-tools","title":"dda tools","text":"<p>Manage tools</p> <p>Usage:</p> <pre><code>dda tools [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-tools-bazel","title":"dda tools bazel","text":"<p>Manage Bazel</p> <p>Usage:</p> <pre><code>dda tools bazel [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-tools-bazel-update","title":"dda tools bazel update","text":"<p>Update the internal Bazelisk binary.</p> <p>Usage:</p> <pre><code>dda tools bazel update [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/interface/tool/","title":"Tool interface","text":""},{"location":"reference/interface/tool/#dda.tools.base.Tool","title":"Tool","text":"<p>Base class for all tools. A tool is an executable that may require special handling to be executed properly.</p> <p>This class supports being used as a context manager and is guaranteed to be entered at all times.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.app","title":"app  <code>property</code>","text":"<pre><code>app: Application\n</code></pre> <p>The <code>Application</code> instance.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.format_command","title":"format_command  <code>abstractmethod</code>","text":"<pre><code>format_command(command: list[str]) -&gt; list[str]\n</code></pre> <p>Format a command to be executed by the tool.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to format.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>The formatted command.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.env_vars","title":"env_vars","text":"<pre><code>env_vars() -&gt; dict[str, str]\n</code></pre> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>The environment variables to set for the tool.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.run","title":"run","text":"<pre><code>run(command: list[str], **kwargs: Any) -&gt; int\n</code></pre> <p>Equivalent to <code>SubprocessRunner.run</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.run</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.capture","title":"capture","text":"<pre><code>capture(command: list[str], **kwargs: Any) -&gt; str\n</code></pre> <p>Equivalent to <code>SubprocessRunner.capture</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.capture</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.wait","title":"wait","text":"<pre><code>wait(command: list[str], **kwargs: Any) -&gt; None\n</code></pre> <p>Equivalent to <code>SubprocessRunner.wait</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.wait</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.exit_with","title":"exit_with","text":"<pre><code>exit_with(command: list[str], **kwargs: Any) -&gt; NoReturn\n</code></pre> <p>Equivalent to <code>SubprocessRunner.exit_with</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.exit_with</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.attach","title":"attach","text":"<pre><code>attach(command: list[str], **kwargs: Any) -&gt; CompletedProcess\n</code></pre> <p>Equivalent to <code>SubprocessRunner.attach</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.attach</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.redirect","title":"redirect","text":"<pre><code>redirect(command: list[str], **kwargs: Any) -&gt; CompletedProcess\n</code></pre> <p>Equivalent to <code>SubprocessRunner.redirect</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.redirect</code>.</p>"},{"location":"reference/interface/env/status/","title":"Environment status","text":""},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentStatus","title":"EnvironmentStatus","text":"<p>This class represents the status of an environment.</p>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentStatus.state","title":"state","text":"<pre><code>state: EnvironmentState\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentStatus.info","title":"info","text":"<pre><code>info: str = ''\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState","title":"EnvironmentState","text":""},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState.STARTED","title":"STARTED","text":"<pre><code>STARTED = 'started'\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState.STOPPED","title":"STOPPED","text":"<pre><code>STOPPED = 'stopped'\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState.STARTING","title":"STARTING","text":"<pre><code>STARTING = 'starting'\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState.STOPPING","title":"STOPPING","text":"<pre><code>STOPPING = 'stopping'\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState.ERROR","title":"ERROR","text":"<pre><code>ERROR = 'error'\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState.NONEXISTENT","title":"NONEXISTENT","text":"<pre><code>NONEXISTENT = 'nonexistent'\n</code></pre>"},{"location":"reference/interface/env/status/#dda.env.models.EnvironmentState.UNKNOWN","title":"UNKNOWN","text":"<pre><code>UNKNOWN = 'unknown'\n</code></pre>"},{"location":"reference/interface/env/types/dev/","title":"Developer environment interface","text":"<p>Environment types implementing the <code>DeveloperEnvironmentInterface</code> interface may be managed by the <code>env dev</code> command group.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentConfig","title":"DeveloperEnvironmentConfig","text":""},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentConfig.repos","title":"repos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repos: list[str] = field(default_factory=lambda: ['datadog-agent'])\n</code></pre>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentConfig.clone","title":"clone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clone: bool = False\n</code></pre>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface","title":"DeveloperEnvironmentInterface","text":"<p>This interface defines the behavior of a developer environment.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.app","title":"app  <code>property</code>","text":"<pre><code>app: Application\n</code></pre> <p>The <code>Application</code> instance.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the environment type e.g. <code>linux-container</code>.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.instance","title":"instance  <code>property</code>","text":"<pre><code>instance: str\n</code></pre> <p>The instance of the environment e.g. <code>default</code>.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.storage_dirs","title":"storage_dirs  <code>cached</code> <code>property</code>","text":"<pre><code>storage_dirs: StorageDirs\n</code></pre> <p>The storage directories for the environment.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.config","title":"config  <code>cached</code> <code>property</code>","text":"<pre><code>config: ConfigT\n</code></pre> <p>The user-defined configuration as an instance of the <code>DeveloperEnvironmentConfig</code> class, or subclass thereof.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.config_file","title":"config_file  <code>cached</code> <code>property</code>","text":"<pre><code>config_file: Path\n</code></pre> <p>The path to the JSON file that is used to persist the environment's configuration until the environment is removed.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.shared_dir","title":"shared_dir  <code>cached</code> <code>property</code>","text":"<pre><code>shared_dir: Path\n</code></pre> <p>The path to the directory that is used to share data between the host and the environment.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.global_shared_dir","title":"global_shared_dir  <code>cached</code> <code>property</code>","text":"<pre><code>global_shared_dir: Path\n</code></pre> <p>The path to the directory that is used to share data between all environments.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.default_repo","title":"default_repo  <code>cached</code> <code>property</code>","text":"<pre><code>default_repo: str\n</code></pre> <p>The default repository to work on.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>This method starts the developer environment. If this method returns early, the environment's status should contain information about the startup progress.</p> <p>This method will only be called if the environment's status is stopped or nonexistent.</p> <p>Users trigger this method by running the <code>env dev start</code> command.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>This method stops the developer environment. If this method returns early, the environment's status should contain information about the shutdown progress.</p> <p>This method will only be called if the environment's status is started.</p> <p>Users trigger this method by running the <code>env dev stop</code> command.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.remove","title":"remove  <code>abstractmethod</code>","text":"<pre><code>remove() -&gt; None\n</code></pre> <p>This method removes the developer environment and all associated state.</p> <p>This method will only be called if the environment's status is stopped or in an error state.</p> <p>Users trigger this method by running the <code>env dev remove</code> command or with the <code>-r</code>/<code>--remove</code> flag of the <code>env dev stop</code> command.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.status","title":"status  <code>abstractmethod</code>","text":"<pre><code>status() -&gt; EnvironmentStatus\n</code></pre> <p>This method returns the current status of the developer environment.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.code","title":"code  <code>abstractmethod</code>","text":"<pre><code>code(*, editor: EditorInterface, repo: str | None = None) -&gt; None\n</code></pre> <p>This method opens the developer environment's code in the configured editor.</p> <p>Users trigger this method by running the <code>env dev code</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>editor</code> <code>EditorInterface</code> <p>The editor to use.</p> required <code>repo</code> <code>str | None</code> <p>The repository to open the code for, or <code>None</code> to open the code for the first configured repository.</p> <code>None</code>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.run_command","title":"run_command  <code>abstractmethod</code>","text":"<pre><code>run_command(command: list[str], *, repo: str | None = None) -&gt; None\n</code></pre> <p>This method runs a command inside the developer environment.</p> <p>Users trigger this method by running the <code>env dev run</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to run inside the developer environment.</p> required <code>repo</code> <code>str | None</code> <p>The repository to run the command for, or <code>None</code> to run the command for the first configured repository.</p> <code>None</code>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.launch_shell","title":"launch_shell  <code>abstractmethod</code>","text":"<pre><code>launch_shell(*, repo: str | None = None) -&gt; NoReturn\n</code></pre> <p>This method starts an interactive shell inside the developer environment.</p> <p>Users trigger this method by running the <code>env dev shell</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>repo</code> <code>str | None</code> <p>The repository to run the shell for, or <code>None</code> to run the shell for the first configured repository.</p> <code>None</code>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.launch_gui","title":"launch_gui","text":"<pre><code>launch_gui() -&gt; NoReturn\n</code></pre> <p>This method starts an interactive GUI inside the developer environment using e.g. RDP or VNC.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.remove_cache","title":"remove_cache","text":"<pre><code>remove_cache() -&gt; None\n</code></pre> <p>This method removes the developer environment's cache that is persisted between lifecycles.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.cache_size","title":"cache_size","text":"<pre><code>cache_size() -&gt; int\n</code></pre> <p>This method returns the size of the developer environment's cache in bytes.</p>"},{"location":"reference/interface/env/types/dev/#dda.env.dev.interface.DeveloperEnvironmentInterface.config_class","title":"config_class  <code>classmethod</code>","text":"<pre><code>config_class() -&gt; type[DeveloperEnvironmentConfig]\n</code></pre> <p>The <code>DeveloperEnvironmentConfig</code> class, or subclass thereof, that is used to configure the environment.</p>"},{"location":"tutorials/cli/create-command/","title":"Creating a command","text":"<p>We will create a command <code>dda agent-release data</code> that shows Agent release information.</p>"},{"location":"tutorials/cli/create-command/#structure","title":"Structure","text":"<p>If you run the root <code>dda</code> command, you'll notice that the subcommands are directories within the src/dda/cli directory:</p> <pre><code>src/dda/cli\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 env\n\u251c\u2500\u2500 inv\n\u251c\u2500\u2500 self\n\u2514\u2500\u2500 tools\n</code></pre> <p>Every command and command group is defined as a Python package with an <code>__init__.py</code> file containing a function <code>cmd</code> that represents the command or command group. A command is a function decorated with <code>@dynamic_command</code> that performs a user-requested action and a command group is a function decorated with <code>@dynamic_group</code> that groups commands together.</p>"},{"location":"tutorials/cli/create-command/#group","title":"Group","text":"<p>First, let's create the <code>dda agent-release</code> command group:</p>  src/dda/cli/agent_release/__init__.py <pre><code>from __future__ import annotations\n\nfrom dda.cli.base import dynamic_group\n\n\n@dynamic_group(short_help=\"Agent release-related commands\")\ndef cmd() -&gt; None:\n    \"\"\"\n    Commands related to managing Agent releases.\n    \"\"\"\n</code></pre> <p>Note</p> <p>Directory names containing multiple words must be separated by underscores. For example, the <code>agent-release</code> command group is located in the <code>src/dda/cli/agent_release</code> directory.</p> <p>Now running the <code>dda</code> command will show the <code>agent-release</code> command group:</p> <pre><code>$ dda\n...\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 agent-release  Agent release-related commands \u2502\n...\n</code></pre>"},{"location":"tutorials/cli/create-command/#initial-command","title":"Initial command","text":"<p>Next, let's create the initial <code>dda agent-release data</code> command and have it display a message:</p>  src/dda/cli/agent_release/data/__init__.py <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom dda.cli.base import dynamic_command, pass_app\n\nif TYPE_CHECKING:\n    from dda.cli.application import Application\n\n\n@dynamic_command(\n    short_help=\"Show Agent release data\",\n)\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    \"\"\"\n    Show Agent release data.\n    \"\"\"\n    app.display(\"Agent release data\")\n</code></pre> <p>Now running the <code>dda agent-release data</code> command will show:</p> <pre><code>$ dda agent-release data\nAgent release data\n</code></pre>"},{"location":"tutorials/cli/create-command/#requiring-dependencies","title":"Requiring dependencies","text":"<p>Fetching the Agent's <code>release.json</code> file requires using an HTTP client. Add the <code>http</code> feature to the command to make sure dependencies such as <code>httpx</code> are available:</p>  src/dda/cli/agent_release/data/__init__.py <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom dda.cli.base import dynamic_command, pass_app\n\nif TYPE_CHECKING:\n    from dda.cli.application import Application\n\n\n@dynamic_command(\n    short_help=\"Show Agent release data\",\n    features=[\"http\"],\n)\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    \"\"\"\n    Show Agent release data.\n    \"\"\"\n    import httpx\n\n    base = \"https://raw.githubusercontent.com\"\n    repo = \"DataDog/datadog-agent\"\n    branch = \"main\"\n    path = \"release.json\"\n    with app.status(\"Fetching Agent release data\"):\n        response = httpx.get(f\"{base}/{repo}/{branch}/{path}\")\n\n    response.raise_for_status()\n    app.display_table(response.json())\n</code></pre> <p>Running the command will now show the Agent release data:</p> <pre><code>$ dda agent-release data\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 base_branch       \u2502 main           \u2502\n\u2502 current_milestone \u2502 7.66.0         \u2502\n\u2502 last_stable       \u2502 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502                   \u2502 \u2502 6 \u2502 6.53.1 \u2502 \u2502\n\u2502                   \u2502 \u2502 7 \u2502 7.64.3 \u2502 \u2502\n\u2502                   \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n...\n</code></pre>"}]}