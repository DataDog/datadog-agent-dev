{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Datadog Agent Dev","text":"CI/CD Docs Package Meta <p>Welcome to the Datadog Agent developer tools documentation. Here you'll find:</p> <ul> <li>Development environment setup guides</li> <li>IDE and editor integrations</li> <li>Build and testing tools</li> <li>Development workflow utilities</li> </ul> <p>This repository documents the development environment and toolchain for Datadog Agent contributors. You'll find resources for IDE setup, build tools, and development utilities rather than Agent implementation details.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Desktop readers can use keyboard shortcuts to navigate.</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installers","title":"Installers","text":"macOSWindows GUI installerCommand line installer <ol> <li>In your browser, download the <code>.pkg</code> file: dda-universal.pkg</li> <li>Run your downloaded file and follow the on-screen instructions.</li> <li>Restart your terminal.</li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.9.0\n</code></pre></li> </ol> <ol> <li>Download the file using the <code>curl</code> command. The <code>-o</code> option specifies the file name that the downloaded package is written to. In this example, the file is written to <code>dda-universal.pkg</code> in the current directory.         <pre><code>curl -Lo dda-universal.pkg https://github.com/DataDog/datadog-agent-dev/releases/latest/download/dda-universal.pkg\n</code></pre></li> <li>Run the standard macOS <code>installer</code> program, specifying the downloaded <code>.pkg</code> file as the source. Use the <code>-pkg</code> parameter to specify the name of the package to install, and the <code>-target /</code> parameter for the drive in which to install the package. The files are installed to <code>/usr/local/dda</code>, and an entry is created at <code>/etc/paths.d/dda</code> that instructs shells to add the <code>/usr/local/dda</code> directory to. You must include sudo on the command to grant write permissions to those folders.         <pre><code>sudo installer -pkg ./dda-universal.pkg -target /\n</code></pre></li> <li>Restart your terminal.</li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.9.0\n</code></pre></li> </ol> GUI installerCommand line installer <ol> <li>In your browser, download one the <code>.msi</code> files:<ul> <li>dda-x64.msi</li> </ul> </li> <li>Run your downloaded file and follow the on-screen instructions.</li> <li>Restart your terminal.</li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.9.0\n</code></pre></li> </ol> <ol> <li> <p>Download and run the installer using the standard Windows <code>msiexec</code> program, specifying one of the <code>.msi</code> files as the source. Use the <code>/passive</code> and <code>/i</code> parameters to request an unattended, normal installation.</p> x64 <pre><code>msiexec /passive /i https://github.com/DataDog/datadog-agent-dev/releases/latest/download/dda-x64.msi\n</code></pre> </li> </ol> x86 <pre><code>msiexec /passive /i https://github.com/DataDog/datadog-agent-dev/releases/latest/download/dda-x86.msi\n</code></pre> <ol> <li>Restart your terminal.</li> <li>To verify that the shell can find and run the <code>dda</code> command in your <code>PATH</code>, use the following command.         <pre><code>$ dda --version\n0.9.0\n</code></pre></li> </ol>"},{"location":"install/#standalone-binaries","title":"Standalone binaries","text":"<p>After downloading the archive corresponding to your platform and architecture, extract the binary to a directory that is on your PATH and rename to <code>dda</code>.</p> macOSWindowsLinux <ul> <li>dda-aarch64-apple-darwin.tar.gz</li> <li>dda-x86_64-apple-darwin.tar.gz</li> </ul> <ul> <li>dda-x86_64-pc-windows-msvc.zip</li> <li>dda-i686-pc-windows-msvc.zip</li> </ul> <ul> <li>dda-aarch64-unknown-linux-gnu.tar.gz</li> <li>dda-x86_64-unknown-linux-gnu.tar.gz</li> <li>dda-x86_64-unknown-linux-musl.tar.gz</li> <li>dda-powerpc64le-unknown-linux-gnu.tar.gz</li> </ul>"},{"location":"install/#pip","title":"pip","text":"<p><code>dda</code> is available on PyPI and can be installed with pip.</p> <pre><code>pip install dda\n</code></pre> <p>!!! warning     - This method modifies the Python environment in which you choose to install.     - Python 3.12.x is required.</p>"},{"location":"how-to/extend/local/","title":"How to add local commands","text":"<p>The CLI dynamically discovers commands within the current directory under <code>.dda/scripts</code>. Most commonly, there is only a single <code>run</code> command group defined here that contains all the commands.</p> <p>Every command and command group is defined as a Python package with an <code>__init__.py</code> file and a function <code>cmd</code> that defines the command or command group.</p> <p>For example, if you wanted to add a <code>dda run foo bar</code> command, you could add the following files:</p> <pre><code>.dda/scripts/run/foo/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 bar\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>The <code>.dda/scripts/run/foo/__init__.py</code> file might define the following command group:</p> <pre><code>from __future__ import annotations\n\nfrom dda.cli.base import dynamic_group\n\n\n@dynamic_group(\n    short_help=\"Foo commands\",\n)\ndef cmd() -&gt; None:\n    pass\n</code></pre> <p>The <code>.dda/scripts/run/foo/bar/__init__.py</code> file might define the following command:</p> <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nimport click\n\nfrom dda.cli.base import dynamic_command, pass_app\n\nif TYPE_CHECKING:\n    from dda.cli.application import Application\n\n\n@dynamic_command(short_help=\"Bar command\")\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    \"\"\"\n    Long description of the command.\n    \"\"\"\n    app.display(\"Running bar command\")\n</code></pre>"},{"location":"how-to/extend/local/#importing-utilities","title":"Importing utilities","text":"<p>Any directory starting with <code>_</code> will not be considered a command or command group. The <code>.dda/scripts</code> directory is added to the Python path, so you can import such private modules. For example, if you have the following structure:</p> <pre><code>.dda/scripts/\n\u2514\u2500\u2500 _utils/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 foo.py\n</code></pre> <p>You can import the <code>foo</code> module like this:</p> <pre><code>from _utils import foo\n</code></pre>"},{"location":"how-to/extend/plugin/","title":"How to use plugins","text":"<p>Every level of commands looks for executables on PATH that start with <code>dda-</code>, with every subcommand separated by a single hyphen.</p> <p>For example, if you have an executable <code>dda-foo</code> in your PATH, you can run it with:</p> <pre><code>dda foo\n</code></pre> <p>The help text of <code>dda</code> would contain the following:</p> <pre><code>foo     [external plugin]\n</code></pre> <p>If you wanted to add a subcommand to the <code>config</code> command, you could create an executable <code>dda-config-bar</code> in your PATH and then run:</p> <pre><code>dda config bar\n</code></pre> <p>Every level of commands within the executable name must exist in the main <code>dda</code> CLI. So, for example, an executable named <code>dda-foo-bar</code> would be invalid because <code>foo</code> is not an existing top-level command.</p>"},{"location":"how-to/process/run/","title":"How to run executables","text":"<p>The <code>Application.subprocess</code> property is the preferred way to run and capture the output of external commands.</p> <pre><code>import click\n\nfrom dda.cli.base import dynamic_command, pass_app\n\n\n@dynamic_command()\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    # call methods on app.subprocess\n</code></pre>"},{"location":"how-to/process/run/#running-commands","title":"Running commands","text":"<p>The <code>SubprocessRunner.run</code> method is used to run a command and wait for it to complete.</p> <pre><code>app.subprocess.run([\"command\", \"arg1\", \"arg2\"])\n</code></pre>"},{"location":"how-to/process/run/#capturing-output","title":"Capturing output","text":"<p>The <code>SubprocessRunner.capture</code> method is used to run a command and capture its output.</p> <pre><code>stdout = app.subprocess.capture([\"command\", \"arg1\", \"arg2\"])\n</code></pre>"},{"location":"how-to/process/run/#running-a-final-command","title":"Running a final command","text":"<p>The <code>SubprocessRunner.exit_with</code> method is used to run a command and exit the current process with the command's exit code.</p> <pre><code>app.subprocess.exit_with([\"command\", \"arg1\", \"arg2\"])\n</code></pre>"},{"location":"how-to/process/tools/","title":"How to use tools","text":"<p>Some executables require special handling to be executed properly. For example, Docker requires a specific environment variable to be set in order to disable noisy CLI hints.</p> <p>Such executables are available as tools on the <code>Application.tools</code> property. Every tool has the same methods as the <code>SubprocessRunner</code> class (except for the <code>spawn_daemon</code> method).</p> <p>The first argument of commands, the tool name itself, is omitted as it is implicit. For example, to run <code>docker build</code>, you can write:</p> <pre><code>app.tools.docker.run([\"build\", \".\", \"--tag\", \"my-image\"])\n</code></pre>"},{"location":"reference/api/app/","title":"Application reference","text":""},{"location":"reference/api/app/#dda.cli.application.Application","title":"Application","text":"<p>This class is never imported directly. Instead, use the <code>dda.cli.base.pass_app</code> decorator to pass an instance of this class to your command.</p> <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom dda.cli.base import dynamic_command, pass_app\n\nif TYPE_CHECKING:\n    from dda.cli.application import Application\n\n\n@dynamic_command(short_help=\"Some command\")\n@pass_app\ndef cmd(app: Application) -&gt; None:\n    \"\"\"\n    Long description of the command.\n    \"\"\"\n    app.display_waiting(\"Running some command\")\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.config","title":"config","text":"<pre><code>config: RootConfig\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.subprocess","title":"subprocess","text":"<pre><code>subprocess: SubprocessRunner\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.tools","title":"tools","text":"<pre><code>tools: Tools\n</code></pre>"},{"location":"reference/api/app/#dda.cli.application.Application.abort","title":"abort","text":"<pre><code>abort(text: str = '', code: int = 1) -&gt; NoReturn\n</code></pre> <p>Gracefully terminate the application with an optional error message.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The error message to display.</p> <code>''</code> <code>code</code> <code>int</code> <p>The exit code to use.</p> <code>1</code>"},{"location":"reference/api/app/#dda.cli.application.Application.display","title":"display","text":"<pre><code>display(text: str = '', **kwargs: Any) -&gt; None\n</code></pre> <p>Output text to stdout using the <code>info</code> style regardless of the configured verbosity level.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_critical","title":"display_critical","text":"<pre><code>display_critical(text: str = '', **kwargs: Any) -&gt; None\n</code></pre> <p>Output text to stderr using the <code>error</code> style regardless of the configured verbosity level.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_error","title":"display_error","text":"<pre><code>display_error(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>error</code> style if the configured verbosity level is at least <code>Verbosity.ERROR</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_warning","title":"display_warning","text":"<pre><code>display_warning(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>warning</code> style if the configured verbosity level is at least <code>Verbosity.WARNING</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_info","title":"display_info","text":"<pre><code>display_info(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>info</code> style if the configured verbosity level is at least <code>Verbosity.INFO</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_success","title":"display_success","text":"<pre><code>display_success(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>success</code> style if the configured verbosity level is at least <code>Verbosity.INFO</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_waiting","title":"display_waiting","text":"<pre><code>display_waiting(\n    text: str = \"\", *, stderr: bool = True, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Output text using the <code>waiting</code> style if the configured verbosity level is at least <code>Verbosity.INFO</code>.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_debug","title":"display_debug","text":"<pre><code>display_debug(\n    text: str = \"\",\n    level: int = VERBOSE,\n    *,\n    stderr: bool = True,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Output text using the <code>debug</code> style if the configured verbosity level is between <code>Verbosity.VERBOSE</code> and <code>Verbosity.TRACE</code> (inclusive).</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to output.</p> <code>''</code> <code>level</code> <code>int</code> <p>The verbosity level.</p> <code>VERBOSE</code> <code>stderr</code> <code>bool</code> <p>Whether to output to stderr.</p> <code>True</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.print</code> method.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.display_header","title":"display_header","text":"<pre><code>display_header(title: str) -&gt; None\n</code></pre> <p>Display a horizontal rule with an embedded title using the <code>success</code> style.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title to display.</p> required"},{"location":"reference/api/app/#dda.cli.application.Application.display_table","title":"display_table","text":"<pre><code>display_table(data: dict[str, Any]) -&gt; None\n</code></pre> <p>Display a table with the given data using the <code>success</code> style for the keys.</p> <p>The following data:</p> <pre><code>{\n    \"key1\": {\n        \"nested1\": {\n            \"str\": \"text\",\n            \"int\": 1,\n            \"float\": 1.0,\n            \"bool\": True,\n            \"list\": [\"foo\", 2, \"bar\"],\n        },\n    },\n}\n</code></pre> <p>would be displayed as:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 key1 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502      \u2502 \u2502 nested1 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 str   \u2502 text              \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 int   \u2502 1                 \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 float \u2502 1.0               \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 bool  \u2502 True              \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2502 list  \u2502 ['foo', 2, 'bar'] \u2502 \u2502 \u2502\n\u2502      \u2502 \u2502         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The data to display.</p> required"},{"location":"reference/api/app/#dda.cli.application.Application.display_syntax","title":"display_syntax","text":"<pre><code>display_syntax(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Display a syntax-highlighted block of text.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>Syntax</code> constructor.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Syntax</code> constructor.</p> <code>{}</code>"},{"location":"reference/api/app/#dda.cli.application.Application.status","title":"status","text":"<pre><code>status(*args: Any, **kwargs: Any) -&gt; Status\n</code></pre> <p>Display a status indicator with the configured spinner. If the session is not interactive, the status indicator will be displayed as a waiting message.</p> <p>The returned object must be used as a context manager.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>Console.status</code> method.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Console.status</code> method.</p> <code>{}</code>"},{"location":"reference/api/app/#dda.cli.application.Application.prompt","title":"prompt","text":"<pre><code>prompt(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Prompt the user for input.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>click.prompt</code> function.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>click.prompt</code> function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The user's input.</p>"},{"location":"reference/api/app/#dda.cli.application.Application.confirm","title":"confirm","text":"<pre><code>confirm(*args: Any, **kwargs: Any) -&gt; bool\n</code></pre> <p>Prompt the user for confirmation.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the <code>click.confirm</code> function.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>click.confirm</code> function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the user confirmed the action.</p>"},{"location":"reference/api/config/","title":"Config reference","text":"<p>Configuration for <code>dda</code> itself is stored in a <code>config.toml</code> file located by default in one of the following platform-specific directories:</p> Platform Directory macOS <code>~/Library/Application Support/dd-agent-dev</code> Windows <code>%USERPROFILE%\\AppData\\Local\\dd-agent-dev</code> Linux <code>$XDG_CONFIG_HOME/dd-agent-dev</code> (the XDG_CONFIG_HOME environment variable defaults to <code>~/.config</code> on Linux) <p>You can select a custom path to the file using the <code>--config</code> root option or by setting the ConfigEnvVars.CONFIG environment variable.</p> <p>The file can be managed by the <code>config</code> command group.</p>"},{"location":"reference/api/config/#root","title":"Root","text":""},{"location":"reference/api/config/#dda.config.model.RootConfig","title":"RootConfig","text":"<p>The root configuration for the application. This is available as the <code>Application.config</code> property.</p>"},{"location":"reference/api/config/#dda.config.model.RootConfig.orgs","title":"orgs","text":"<pre><code>orgs: dict[str, OrgConfig] = field(default_factory=_default_orgs)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.env","title":"env","text":"<pre><code>env: EnvConfig = field(default_factory=EnvConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.envs","title":"envs","text":"<pre><code>envs: dict[str, dict[str, Any]] = {}\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.storage","title":"storage","text":"<pre><code>storage: StorageDirs = field(default_factory=StorageDirs)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.git","title":"git","text":"<pre><code>git: GitConfig = field(default_factory=GitConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.github","title":"github","text":"<pre><code>github: GitHubConfig = field(default_factory=GitHubConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.RootConfig.terminal","title":"terminal","text":"<pre><code>terminal: TerminalConfig = field(default_factory=TerminalConfig)\n</code></pre>"},{"location":"reference/api/config/#environments","title":"Environments","text":""},{"location":"reference/api/config/#dda.config.model.env.EnvConfig","title":"EnvConfig","text":""},{"location":"reference/api/config/#dda.config.model.env.EnvConfig.dev","title":"dev","text":"<pre><code>dev: DevEnvConfig = field(default_factory=DevEnvConfig)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig","title":"DevEnvConfig","text":"config.toml <pre><code>[env.dev]\ndefault-type = \"linux-container\"\nclone-repos = false\nuniversal-shell = false\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.default_type","title":"default_type","text":"<pre><code>default_type: str = field(\n    name=\"default-type\", default=DEFAULT_DEV_ENV\n)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.clone_repos","title":"clone_repos","text":"<pre><code>clone_repos: bool = field(name='clone-repos', default=False)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.env.DevEnvConfig.universal_shell","title":"universal_shell","text":"<pre><code>universal_shell: bool = field(name='universal-shell', default=False)\n</code></pre>"},{"location":"reference/api/config/#git","title":"Git","text":""},{"location":"reference/api/config/#dda.config.model.git.GitConfig","title":"GitConfig","text":""},{"location":"reference/api/config/#dda.config.model.git.GitConfig.user","title":"user","text":"<pre><code>user: GitUser = field(default_factory=GitUser)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.git.GitUser","title":"GitUser","text":"config.toml <pre><code>[git.user]\nname = \"U.N. Owen\"\nemail = \"void@some.where\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.git.GitUser.name","title":"name","text":"<pre><code>name: str = field(default_factory=default_user_name)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.git.GitUser.email","title":"email","text":"<pre><code>email: str = field(default_factory=default_user_email)\n</code></pre>"},{"location":"reference/api/config/#github","title":"GitHub","text":""},{"location":"reference/api/config/#dda.config.model.github.GitHubConfig","title":"GitHubConfig","text":""},{"location":"reference/api/config/#dda.config.model.github.GitHubConfig.auth","title":"auth","text":"<pre><code>auth: GitHubAuth = field(default_factory=GitHubAuth)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.github.GitHubAuth","title":"GitHubAuth","text":"config.toml <pre><code>[github.auth]\nuser = \"username\"\ntoken = \"*****\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.github.GitHubAuth.user","title":"user","text":"<pre><code>user: str = ''\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.github.GitHubAuth.token","title":"token","text":"<pre><code>token: str = ''\n</code></pre>"},{"location":"reference/api/config/#organization","title":"Organization","text":""},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig","title":"OrgConfig","text":"config.toml <pre><code>[orgs.default]\napi_key = \"*****\"\napp_key = \"*****\"\nsite = \"datadoghq.com\"\ndd_url = \"https://app.datadoghq.com\"\nlogs_url = \"\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.api_key","title":"api_key","text":"<pre><code>api_key: str = os.environ.get('DD_API_KEY', '')\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.app_key","title":"app_key","text":"<pre><code>app_key: str = os.environ.get('DD_APP_KEY', '')\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.site","title":"site","text":"<pre><code>site: str = os.environ.get('DD_SITE', 'datadoghq.com')\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.dd_url","title":"dd_url","text":"<pre><code>dd_url: str = os.environ.get(\"DD_DD_URL\", \"https://app.datadoghq.com\")\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.orgs.OrgConfig.logs_url","title":"logs_url","text":"<pre><code>logs_url: str = os.environ.get('DD_LOGS_CONFIG_LOGS_DD_URL', '')\n</code></pre>"},{"location":"reference/api/config/#storage","title":"Storage","text":""},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs","title":"StorageDirs","text":"config.toml <pre><code>[storage]\ndata = \"/path/to/data\"\ncache = \"/path/to/cache\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs.data","title":"data","text":"<pre><code>data: Path = field(default_factory=default_data_dir)\n</code></pre> <p>This is the directory that is used to persist data. By default it is set to one of the following platform-specific directories:</p> Platform Directory macOS <code>~/Library/Application Support/dd-agent-dev</code> Windows <code>%USERPROFILE%\\AppData\\Local\\dd-agent-dev</code> Linux <code>$XDG_DATA_HOME/dd-agent-dev</code> (the XDG_DATA_HOME environment variable defaults to <code>~/.local/share</code> on Linux) <p>You can select a custom path to the directory using the <code>--data-dir</code> root option or by setting the ConfigEnvVars.DATA environment variable.</p>"},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs.cache","title":"cache","text":"<pre><code>cache: Path = field(default_factory=default_cache_dir)\n</code></pre> <p>This is the directory that is used to cache data. By default it is set to one of the following platform-specific directories:</p> Platform Directory macOS <code>~/Library/Caches/dd-agent-dev</code> Windows <code>%USERPROFILE%\\AppData\\Local\\dd-agent-dev\\Cache</code> Linux <code>$XDG_CACHE_HOME/dd-agent-dev</code> (the XDG_CACHE_HOME environment variable defaults to <code>~/.cache</code> on Linux) <p>You can select a custom path to the directory using the <code>--cache-dir</code> root option or by setting the ConfigEnvVars.CACHE environment variable.</p>"},{"location":"reference/api/config/#dda.config.model.storage.StorageDirs.join","title":"join","text":"<pre><code>join(*parts: str) -&gt; StorageDirs\n</code></pre> <p>Join the storage directories with the given parts.</p> <p>Parameters:</p> Name Type Description Default <code>parts</code> <code>str</code> <p>The parts to join.</p> <code>()</code> <p>Returns:</p> Type Description <code>StorageDirs</code> <p>A new <code>StorageDirs</code> instance with the joined paths.</p>"},{"location":"reference/api/config/#terminal","title":"Terminal","text":""},{"location":"reference/api/config/#dda.config.model.terminal.TerminalConfig","title":"TerminalConfig","text":"config.toml <pre><code>[terminal]\nverbosity = 0\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalConfig.verbosity","title":"verbosity","text":"<pre><code>verbosity: Verbosity = INFO\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalConfig.styles","title":"styles","text":"<pre><code>styles: TerminalStyles = field(default_factory=TerminalStyles)\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles","title":"TerminalStyles","text":"<p>Styling documentation:</p> <ul> <li>Syntax</li> <li>Standard colors</li> </ul>  config.toml <pre><code>[terminal.styles]\nerror = \"bold red\"\nwarning = \"bold yellow\"\ninfo = \"bold\"\nsuccess = \"bold cyan\"\nwaiting = \"bold magenta\"\ndebug = \"bold on bright_black\"\nspinner = \"simpleDotsScrolling\"\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.error","title":"error","text":"<pre><code>error: str = 'bold red'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.warning","title":"warning","text":"<pre><code>warning: str = 'bold yellow'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.info","title":"info","text":"<pre><code>info: str = 'bold'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.success","title":"success","text":"<pre><code>success: str = 'bold cyan'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.waiting","title":"waiting","text":"<pre><code>waiting: str = 'bold magenta'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.debug","title":"debug","text":"<pre><code>debug: str = 'bold on bright_black'\n</code></pre>"},{"location":"reference/api/config/#dda.config.model.terminal.TerminalStyles.spinner","title":"spinner","text":"<pre><code>spinner: str = 'simpleDotsScrolling'\n</code></pre> <p>The list of available spinners can be found here.</p>"},{"location":"reference/api/constants/","title":"Constants reference","text":""},{"location":"reference/api/constants/#dda.config.constants.Verbosity","title":"Verbosity","text":""},{"location":"reference/api/constants/#dda.config.constants.Verbosity.SILENT","title":"SILENT","text":"<pre><code>SILENT = -3\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.ERROR","title":"ERROR","text":"<pre><code>ERROR = -2\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.WARNING","title":"WARNING","text":"<pre><code>WARNING = -1\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.INFO","title":"INFO","text":"<pre><code>INFO = 0\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.VERBOSE","title":"VERBOSE","text":"<pre><code>VERBOSE = 1\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.DEBUG","title":"DEBUG","text":"<pre><code>DEBUG = 2\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.Verbosity.TRACE","title":"TRACE","text":"<pre><code>TRACE = 3\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars","title":"AppEnvVars","text":""},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.INTERACTIVE","title":"INTERACTIVE","text":"<pre><code>INTERACTIVE = 'DDA_INTERACTIVE'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.QUIET","title":"QUIET","text":"<pre><code>QUIET = 'DDA_QUIET'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.VERBOSE","title":"VERBOSE","text":"<pre><code>VERBOSE = 'DDA_VERBOSE'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.NO_DYNAMIC_DEPS","title":"NO_DYNAMIC_DEPS","text":"<pre><code>NO_DYNAMIC_DEPS = 'DDA_NO_DYNAMIC_DEPS'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.TELEMETRY_API_KEY","title":"TELEMETRY_API_KEY","text":"<pre><code>TELEMETRY_API_KEY = 'DDA_TELEMETRY_API_KEY'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.NO_COLOR","title":"NO_COLOR","text":"<pre><code>NO_COLOR = 'NO_COLOR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.AppEnvVars.FORCE_COLOR","title":"FORCE_COLOR","text":"<pre><code>FORCE_COLOR = 'FORCE_COLOR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars","title":"ConfigEnvVars","text":""},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars.DATA","title":"DATA","text":"<pre><code>DATA = 'DDA_DATA_DIR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars.CACHE","title":"CACHE","text":"<pre><code>CACHE = 'DDA_CACHE_DIR'\n</code></pre>"},{"location":"reference/api/constants/#dda.config.constants.ConfigEnvVars.CONFIG","title":"CONFIG","text":"<pre><code>CONFIG = 'DDA_CONFIG'\n</code></pre>"},{"location":"reference/api/fs/","title":"Filesystem reference","text":""},{"location":"reference/api/fs/#dda.utils.fs.temp_directory","title":"temp_directory","text":"<pre><code>temp_directory() -&gt; Generator[Path, None, None]\n</code></pre> <p>A context manager that creates a temporary directory and yields a path to it. Example:</p> <pre><code>with temp_directory() as temp_dir:\n    ...\n</code></pre> <p>Yields:</p> Type Description <code>Path</code> <p>The resolved path to the temporary directory, following all symlinks.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path","title":"Path","text":"<p>               Bases: <code>Path</code></p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.long_id","title":"long_id","text":"<pre><code>long_id: str\n</code></pre> <p>Returns a SHA-256 hashed, URL-safe base64 encoded representation of the current path. This is useful on case-insensitive filesystems to identify paths that are the same.</p> <p>Caveat</p> <p>This identifier considers the filesystem to be case-insensitive on macOS. Although that is not a technical guarantee, it is in practice true.</p> <p>Returns:</p> Type Description <code>str</code> <p>A unique identifier for the current path.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.id","title":"id","text":"<pre><code>id: str\n</code></pre> <p>Returns:</p> Type Description <code>str</code> <p>The first 8 characters of the long ID.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.ensure_dir","title":"ensure_dir","text":"<pre><code>ensure_dir() -&gt; None\n</code></pre> <p>Ensure the current path is a directory. Equivalent to calling <code>Path.mkdir</code> with <code>parents=True</code> and <code>exist_ok=True</code>.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.expand","title":"expand","text":"<pre><code>expand() -&gt; Path\n</code></pre> <p>Expand the current path by resolving the user home directory and environment variables.</p> <p>Returns:</p> Type Description <code>Path</code> <p>The new expanded path.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.write_atomic","title":"write_atomic","text":"<pre><code>write_atomic(data: str | bytes, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Atomically write data to the current path.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | bytes</code> <p>The data to write.</p> required <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to <code>os.fdopen</code>.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>os.fdopen</code>.</p>"},{"location":"reference/api/fs/#dda.utils.fs.Path.as_cwd","title":"as_cwd","text":"<pre><code>as_cwd() -&gt; Generator[Path, None, None]\n</code></pre> <p>A context manager that changes the current working directory to the current path. Example:</p> <pre><code>with Path(\"foo\").as_cwd():\n    ...\n</code></pre> <p>Yields:</p> Type Description <code>Path</code> <p>The current path.</p>"},{"location":"reference/api/process/","title":"Process reference","text":""},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner","title":"SubprocessRunner","text":"<p>A class for managing the execution of external commands. This is available as the <code>Application.subprocess</code> property.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.run","title":"run","text":"<pre><code>run(command: list[str] | str, **kwargs: Any) -&gt; CompletedProcess\n</code></pre> <p>Run a command and wait for it to complete.</p> <p>The <code>check</code> keyword argument defaults to <code>True</code>. When set to <code>True</code> and the command exits with a non-zero exit code, the application will abort using the command's exit code rather than raising an exception.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str] | str</code> <p>The command to run.</p> required <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The completed process.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>subprocess.run</code>.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.capture","title":"capture","text":"<pre><code>capture(\n    command: list[str] | str,\n    *,\n    cross_streams: bool = True,\n    **kwargs: Any,\n) -&gt; str\n</code></pre> <p>Run a command and capture its output.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str] | str</code> <p>The command to run.</p> required <code>cross_streams</code> <code>bool</code> <p>Whether to merge the command's standard error stream into its standard output stream.</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>The command's standard output.</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>run</code> method.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.wait","title":"wait","text":"<pre><code>wait(\n    command: list[str] | str, *, message: str = \"\", **kwargs: Any\n) -&gt; None\n</code></pre> <p>Run a command and wait for it to complete. By default, the command output is hidden but will be displayed if the configured verbosity level is at least <code>Verbosity.VERBOSE</code>. Under that circumstance, this method is a mere pass-through to the <code>run</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str] | str</code> <p>The command to run.</p> required <code>message</code> <code>str</code> <p>The message to display while the command is running. Has no effect if the verbosity level is less than <code>Verbosity.VERBOSE</code>.</p> <code>''</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>run</code> or <code>capture</code> methods.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.exit_with","title":"exit_with","text":"<pre><code>exit_with(command: list[str], **kwargs: Any) -&gt; NoReturn\n</code></pre> <p>Run a command and abort with the command's exit code.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to run.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>run</code> method.</p>"},{"location":"reference/api/process/#dda.utils.process.SubprocessRunner.spawn_daemon","title":"spawn_daemon","text":"<pre><code>spawn_daemon(command: list[str] | str, **kwargs: Any) -&gt; None\n</code></pre> <p>Spawn a daemon process that is detached from the current process.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str] | str</code> <p>The command to run.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>Popen</code> constructor.</p>"},{"location":"reference/api/process/#dda.utils.process.EnvVars","title":"EnvVars","text":"<pre><code>EnvVars(\n    env_vars: dict[str, str] | None = None,\n    *,\n    include: list[str] | None = None,\n    exclude: list[str] | None = None,\n)\n</code></pre> <p>This class is a snapshot of the current process' environment variables at the time of instantiation.</p> <p>Setting environment variables for subprocesses becomes easy, rather than having to manually make a copy of the current environment variables and updating it:</p> <pre><code>app.subprocess.run([...], env=EnvVars({\"FOO\": \"bar\"}))\n</code></pre> <p>Instances may also be used as a context manager to temporarily update <code>os.environ</code> for the current process:</p> <pre><code>with EnvVars({\"FOO\": \"bar\"}):\n    ...\n</code></pre> <p>Warning</p> <p>It's undesirable to persist instances for long periods of time because the environment variables may change during the lifetime of the instance.</p> <p>Parameters:</p> Name Type Description Default <code>env_vars</code> <code>dict[str, str] | None</code> <p>Additional environment variables to include in the snapshot. These override existing environment variables and are unaffected by the <code>include</code> and <code>exclude</code> filtering parameters.</p> <code>None</code> <code>include</code> <code>list[str] | None</code> <p>A list of glob patterns used to include environment variables in the snapshot.</p> <code>None</code> <code>exclude</code> <code>list[str] | None</code> <p>A list of glob patterns used to exclude environment variables from the snapshot. This takes precedence over the <code>include</code> parameter.</p> <code>None</code>"},{"location":"reference/api/tools/","title":"Tools reference","text":""},{"location":"reference/api/tools/#dda.tools.Tools","title":"Tools","text":"<p>This is available as the <code>Application.tools</code> property.</p>"},{"location":"reference/api/tools/#dda.tools.Tools.docker","title":"docker","text":"<pre><code>docker: Docker\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.Tools.uv","title":"uv","text":"<pre><code>uv: UV\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.docker.Docker","title":"Docker","text":"<p>If <code>docker</code> is not on the PATH, this will try to use <code>podman</code> instead. Additionally, Docker CLI hints are disabled to have less verbosity and a more consistent experience across different Docker-compatible tools.</p> <p>Example usage:</p> <pre><code>app.tools.docker.run([\"build\", \".\", \"--tag\", \"my-image\"])\n</code></pre>"},{"location":"reference/api/tools/#dda.tools.uv.UV","title":"UV","text":"<p>This will use the UV executable that comes with <code>dda</code>.</p> <p>Example usage:</p> <pre><code>app.tools.uv.run([\"pip\", \"tree\"])\n</code></pre>"},{"location":"reference/cli/","title":"CLI","text":""},{"location":"reference/cli/#verbosity","title":"Verbosity","text":"<p>The amount of displayed output is controlled solely by the <code>-v</code>/<code>--verbose</code> (environment variable <code>AppEnvVars.VERBOSE</code>) and <code>-q</code>/<code>--quiet</code> (environment variable <code>AppEnvVars.QUIET</code>) root options.</p> <p>The levels are defined by the <code>Verbosity</code> enum.</p>"},{"location":"reference/cli/#tab-completion","title":"Tab completion","text":"<p>Completion is achieved by saving a script and then executing it as a part of your shell's startup sequence.</p> <p>Afterward, you'll need to start a new shell in order for the changes to take effect.</p> bashzshfish <p>Save the script somewhere:</p> <pre><code>_DDA_COMPLETE=bash_source dda &gt; ~/.dda-complete.bash\n</code></pre> <p>Source the file in <code>~/.bashrc</code> (or <code>~/.bash_profile</code> if on macOS):</p> <pre><code>. ~/.dda-complete.bash\n</code></pre> <p>Save the script somewhere:</p> <pre><code>_DDA_COMPLETE=zsh_source dda &gt; ~/.dda-complete.zsh\n</code></pre> <p>Source the file in <code>~/.zshrc</code>:</p> <pre><code>. ~/.dda-complete.zsh\n</code></pre> <p>Save the script in <code>~/.config/fish/completions</code>:</p> <pre><code>_DDA_COMPLETE=fish_source dda &gt; ~/.config/fish/completions/dda.fish\n</code></pre>"},{"location":"reference/cli/commands/","title":"dda","text":"<p>Usage:</p> <pre><code>dda [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbose</code>, <code>-v</code> integer range (<code>0</code> and above) Increase verbosity (can be used additively) [env var: <code>DDA_VERBOSE</code>] None <code>--quiet</code>, <code>-q</code> integer range (<code>0</code> and above) Decrease verbosity (can be used additively) [env var: <code>DDA_QUIET</code>] None <code>--color</code> / <code>--no-color</code> boolean Whether or not to display colored output (default is auto-detection) [env vars: <code>FORCE_COLOR</code>/<code>NO_COLOR</code>] None <code>--interactive</code> / <code>--no-interactive</code> boolean Whether or not to allow features like prompts and progress bars (default is auto-detection) [env var: <code>DDA_INTERACTIVE</code>] None <code>--data-dir</code> text The path to a custom directory used to persist data [env var: <code>DDA_DATA_DIR</code>] None <code>--cache-dir</code> text The path to a custom directory used to cache data [env var: <code>DDA_CACHE_DIR</code>] None <code>--config</code> text The path to a custom config file to use [env var: <code>DDA_CONFIG</code>] None <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config","title":"dda config","text":"<p>Manage the config file</p> <p>Usage:</p> <pre><code>dda config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-explore","title":"dda config explore","text":"<p>Open the config location in your file manager.</p> <p>Usage:</p> <pre><code>dda config explore [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-find","title":"dda config find","text":"<p>Output the location of the config file.</p> <p>Usage:</p> <pre><code>dda config find [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-restore","title":"dda config restore","text":"<p>Restore the config file to default settings.</p> <p>Usage:</p> <pre><code>dda config restore [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-set","title":"dda config set","text":"<p>Set the value of config keys. If the value is omitted, you will be prompted, with the input hidden if it is sensitive.</p> <p>Usage:</p> <pre><code>dda config set [OPTIONS] KEY [VALUE]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-config-show","title":"dda config show","text":"<p>Render the contents of the config file.</p> <p>Usage:</p> <pre><code>dda config show [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--all</code>, <code>-a</code> boolean Do not scrub secret fields <code>False</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env","title":"dda env","text":"<p>Work with environments</p> <p>Usage:</p> <pre><code>dda env [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev","title":"dda env dev","text":"<p>Work with developer environments</p> <p>Usage:</p> <pre><code>dda env dev [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-code","title":"dda env dev code","text":"<p>Open a code editor for the developer environment.</p> <p>Usage:</p> <pre><code>dda env dev code [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--repo</code>, <code>-r</code> text The Datadog repository to work on None <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-gui","title":"dda env dev gui","text":"<p>Access a developer environment through a graphical interface.</p> <p>Usage:</p> <pre><code>dda env dev gui [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-ls","title":"dda env dev ls","text":"<p>List the available developer environments.</p> <p>Usage:</p> <pre><code>dda env dev ls [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-remove","title":"dda env dev remove","text":"<p>Remove a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev remove [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-run","title":"dda env dev run","text":"<p>Run a command within a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev run [OPTIONS] ARGS...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--repo</code>, <code>-r</code> text The Datadog repository in which to run the command None"},{"location":"reference/cli/commands/#dda-env-dev-shell","title":"dda env dev shell","text":"<p>Spawn a shell within a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev shell [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--repo</code>, <code>-r</code> text The Datadog repository in which to enter None <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-start","title":"dda env dev start","text":"<p>Start a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev start [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-status","title":"dda env dev status","text":"<p>Check the status of a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev status [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-env-dev-stop","title":"dda env dev stop","text":"<p>Stop a developer environment.</p> <p>Usage:</p> <pre><code>dda env dev stop [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--type</code>, <code>-t</code> choice (<code>linux-container</code> | <code>windows-cloud</code>) The type of developer environment None <code>--id</code> text Unique identifier for the environment <code>default</code> <code>-r</code>, <code>--remove</code> boolean Remove the environment after stopping <code>False</code> <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-inv","title":"dda inv","text":"<p>Invoke a local task.</p> <p>Usage:</p> <pre><code>dda inv [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--feat</code> text Extra features to install (multiple allowed). After a feature is installed once, it will always be available. None <code>--dep</code> text Extra dependencies to install (multiple allowed). After a dependency is installed once, it will always be available. None <code>--no-dynamic-deps</code> boolean Assume required dependencies are already installed <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this help message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self","title":"dda self","text":"<p>Manage dda</p> <p>Usage:</p> <pre><code>dda self [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-dep","title":"dda self dep","text":"<p>Manage dda's dependencies</p> <p>Usage:</p> <pre><code>dda self dep [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-dep-lock","title":"dda self dep lock","text":"<p>Lock dependencies.</p> <p>Usage:</p> <pre><code>dda self dep lock [OPTIONS] [ARGS]...\n</code></pre>"},{"location":"reference/cli/commands/#dda-self-dep-sync","title":"dda self dep sync","text":"<p>Synchronize dependencies.</p> <p>Example:</p> <pre><code>dda self dep sync -f foo -f bar\n</code></pre> <p>Usage:</p> <pre><code>dda self dep sync [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--feature</code> text Feature to synchronize (multiple allowed) None <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry","title":"dda self telemetry","text":"<p>Manage telemetry submission</p> <p>Usage:</p> <pre><code>dda self telemetry [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-disable","title":"dda self telemetry disable","text":"<p>Disable telemetry.</p> <p>Usage:</p> <pre><code>dda self telemetry disable [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-enable","title":"dda self telemetry enable","text":"<p>Enable telemetry.</p> <p>Usage:</p> <pre><code>dda self telemetry enable [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-log","title":"dda self telemetry log","text":"<p>Manage daemon logging</p> <p>Usage:</p> <pre><code>dda self telemetry log [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-log-remove","title":"dda self telemetry log remove","text":"<p>Clear the log.</p> <p>Usage:</p> <pre><code>dda self telemetry log remove [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/commands/#dda-self-telemetry-log-show","title":"dda self telemetry log show","text":"<p>Show the log.</p> <p>Usage:</p> <pre><code>dda self telemetry log show [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code>, <code>-h</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/interface/tool/","title":"Tool interface","text":""},{"location":"reference/interface/tool/#dda.tools.base.Tool","title":"Tool","text":"<p>Base class for all tools. A tool is an executable that may require special handling to be executed properly.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.app","title":"app  <code>property</code>","text":"<pre><code>app: Application\n</code></pre> <p>The <code>Application</code> instance.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.format_command","title":"format_command  <code>abstractmethod</code>","text":"<pre><code>format_command(command: list[str]) -&gt; list[str]\n</code></pre> <p>Format a command to be executed by the tool.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to format.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>The formatted command.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.env_vars","title":"env_vars","text":"<pre><code>env_vars() -&gt; dict[str, str]\n</code></pre> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>The environment variables to set for the tool.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.run","title":"run","text":"<pre><code>run(\n    command: list[str], *args: Any, **kwargs: Any\n) -&gt; CompletedProcess\n</code></pre> <p>Equivalent to <code>SubprocessRunner.run</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to <code>SubprocessRunner.run</code>.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.run</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.capture","title":"capture","text":"<pre><code>capture(command: list[str], *args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Equivalent to <code>SubprocessRunner.capture</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to <code>SubprocessRunner.capture</code>.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.capture</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.wait","title":"wait","text":"<pre><code>wait(command: list[str], *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Equivalent to <code>SubprocessRunner.wait</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to <code>SubprocessRunner.wait</code>.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.wait</code>.</p>"},{"location":"reference/interface/tool/#dda.tools.base.Tool.exit_with","title":"exit_with","text":"<pre><code>exit_with(command: list[str], *args: Any, **kwargs: Any) -&gt; NoReturn\n</code></pre> <p>Equivalent to <code>SubprocessRunner.exit_with</code> with the <code>command</code> formatted by the tool's <code>format_command</code> method and the environment variables set by the tool's <code>env_vars</code> method (if any).</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>The command to execute.</p> required <p>Other Parameters:</p> Name Type Description <code>*args</code> <code>Any</code> <p>Additional arguments to pass to <code>SubprocessRunner.exit_with</code>.</p> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>SubprocessRunner.exit_with</code>.</p>"}]}